"""Add dictionary entry tables

Revision ID: 59b4af7d074c
Revises: f30656839bba
Create Date: 2025-08-08 02:15:58.657579

"""

# for `sqlmodel.sql` access
# pyright: reportAttributeAccessIssue=false
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = "59b4af7d074c"
down_revision: Union[str, Sequence[str], None] = "f30656839bba"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "dictionary_entry",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("json_data", sa.JSON(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_dictionary_entry_id"), "dictionary_entry", ["id"], unique=False)
    op.create_table(
        "dictionary_entry_translation",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("dictionary_entry_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("json_data", sa.JSON(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dictionary_entry_id"],
            ["dictionary_entry.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_dictionary_entry_translation_dictionary_entry_id"),
        "dictionary_entry_translation",
        ["dictionary_entry_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_dictionary_entry_translation_id"),
        "dictionary_entry_translation",
        ["id"],
        unique=False,
    )
    op.create_table(
        "meaning_fsrs",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("dictionary_entry_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("due", sa.DateTime(), nullable=False),
        sa.Column("stability", sa.Float(), nullable=True),
        sa.Column("difficulty", sa.Float(), nullable=True),
        sa.Column("state", sa.Integer(), nullable=False),
        sa.Column("step", sa.Integer(), nullable=False),
        sa.Column("last_review", sa.DateTime(), nullable=True),
        sa.Column("reps", sa.Integer(), nullable=False),
        sa.Column("lapses", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dictionary_entry_id"],
            ["dictionary_entry.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_meaning_fsrs_dictionary_entry_id"),
        "meaning_fsrs",
        ["dictionary_entry_id"],
        unique=False,
    )
    op.create_index(op.f("ix_meaning_fsrs_id"), "meaning_fsrs", ["id"], unique=False)
    op.create_table(
        "user_dictionary_entry",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("auth_user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("dictionary_entry_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["auth_user_id"],
            ["auth_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["dictionary_entry_id"],
            ["dictionary_entry.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_dictionary_entry_auth_user_id"),
        "user_dictionary_entry",
        ["auth_user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_dictionary_entry_dictionary_entry_id"),
        "user_dictionary_entry",
        ["dictionary_entry_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_dictionary_entry_id"), "user_dictionary_entry", ["id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_user_dictionary_entry_id"), table_name="user_dictionary_entry")
    op.drop_index(
        op.f("ix_user_dictionary_entry_dictionary_entry_id"), table_name="user_dictionary_entry"
    )
    op.drop_index(op.f("ix_user_dictionary_entry_auth_user_id"), table_name="user_dictionary_entry")
    op.drop_table("user_dictionary_entry")
    op.drop_index(op.f("ix_meaning_fsrs_id"), table_name="meaning_fsrs")
    op.drop_index(op.f("ix_meaning_fsrs_dictionary_entry_id"), table_name="meaning_fsrs")
    op.drop_table("meaning_fsrs")
    op.drop_index(
        op.f("ix_dictionary_entry_translation_id"), table_name="dictionary_entry_translation"
    )
    op.drop_index(
        op.f("ix_dictionary_entry_translation_dictionary_entry_id"),
        table_name="dictionary_entry_translation",
    )
    op.drop_table("dictionary_entry_translation")
    op.drop_index(op.f("ix_dictionary_entry_id"), table_name="dictionary_entry")
    op.drop_table("dictionary_entry")
    # ### end Alembic commands ###

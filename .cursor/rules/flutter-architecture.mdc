---
description: 
globs: 
alwaysApply: false
---
# Flutter Mobile App Architecture (Maid)

The Flutter mobile app follows a structured architecture for multi-platform mobile development:

## Directory Structure

- `maid/lib/` - Main Flutter code
  - `controllers/` - Business logic and state management
  - `widgets/` - Reusable UI components
  - `locale/` - Internationalization
  - `utilities/` - Helper functions and utilities
- `maid/assets/` - Static assets (images, fonts)
- `maid/ios/`, `maid/android/`, `maid/macos/`, `maid/windows/`, `maid/linux/` - Platform-specific code

## Key Concepts

1. **Widget-Based UI**
   - Custom widgets are in `maid/lib/widgets/`
   - Organized by functionality into subdirectories
   - Follow Flutter's composition over inheritance pattern

2. **State Management**
   - Controllers handle business logic and state
   - Use dependency injection for services

3. **Internationalization**
   - Locale files in the `locale` directory
   - ARB files for translations in `arb/` directory

## Navigation

- Screen transitions should use named routes
- Route definitions should be centralized

## UI Components

- Custom buttons in `widgets/buttons/`
- Chat-related components in `widgets/chat/`
- Dialog components in `widgets/dialogs/`
- Text field components in `widgets/text_fields/`

## Main Entry Point

The application entry point is [maid/lib/main.dart](mdc:maid/lib/main.dart) which sets up the app configuration and initializes the widget tree.

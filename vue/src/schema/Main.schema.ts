/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type MessageUnion = MessageParseText | MessageDefineWord | MessageParseTextToForeign;
/**
 * The list of BCP 47 language tags of the languages that are most commonly used by the user. Take this list as a priority when you try to detect the text language. Although it is not guaranteed to completely match the text languages
 */
export type OriginalLanguages = string[];
/**
 * The list of BCP 47 language tags of the languages native to the user. Take this list as a priority when you try to detect the text language. Although it is not guaranteed to completely match the text languages
 */
export type NativeLanguages = string[];

export interface Main {
  MessageUnion?: MessageUnion;
  model?: {
    Word?: Word;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface MessageParseText {
  input: {
    name: "parseText";
    data: {
      text: string;
      originalLanguages: OriginalLanguages;
      /**
       * The BCP 47 language tag of the language that the user wants to translate the text to.
       */
      translationLanguage: string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * The result of parsing the text for futher translation.
   */
  output?: {
    /**
     * Split the text into grammatical parts. A part should be a dictionary entry like a single word or a famous phrase, it is something that can be defined or translated. Do not include symbols, unless they are the integral part of a phrase.
     */
    definitionParts: {
      text: string;
      /**
       * A short translation of the definition part without additional formatting. Among several translation choices, choose the one that is the best fitting the original context from the user input text that was sent for this parsing.
       */
      translation?: string;
      /**
       * The BCP 47 language tag of the language of that part. Null for unknown
       */
      languageOriginal?: string | null;
      /**
       * The BCP 47 language tag of the language of the translation. It should match the requested 'translationLanguage'
       */
      languageTranslated?: string;
      [k: string]: unknown;
    }[];
    /**
     * The full translation of the text to the requested language.
     */
    translation: {
      text: string;
      /**
       * The BCP 47 language tag of the language of the translation. It should match the requested 'translationLanguage'
       */
      language: string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface MessageDefineWord {
  input: {
    name: "defineWord";
    data: {
      /**
       * A word or a common phrase to define
       */
      wordString: string;
      /**
       * A context from which the word or phrase is taken
       */
      context: string;
      originalLanguages: OriginalLanguages;
      /**
       * The BCP 47 language tag of the language that the user wants to translate the text to.
       */
      translationLanguage: string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  output?: {
    definition: Word;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * A detailed representation of a word, including its original and neutral forms, pronunciations, translations, definitions, origin, and usage examples.
 */
export interface Word {
  /**
   * The original language of the word in a BCP 47 format.
   */
  languageOriginal: string;
  /**
   * The language the word is translated to in a BCP 47 format.
   */
  languageTranslated: string;
  /**
   * The original word given, in the exact same grammatic form, capitalized.
   */
  originalWord: string;
  /**
   * The word in a neutral grammatic form.
   */
  neutralForm: string;
  /**
   * A pronunciation of the original word given.
   */
  pronounciation: string;
  /**
   * An extensive translation to the language defined by a `languageTranslated` property, the more words the better.
   */
  translation: string;
  /**
   * Common synonyms in the original language.
   */
  synonyms: string[];
  /**
   * An extensive definition in the original language.
   */
  definitionOriginal: string;
  /**
   * An extensive definition in the language defined by a `languageTranslated` property.
   */
  definitionTranslated: string;
  /**
   * The root parts of the word and the origin in the language defined by a `languageTranslated` property. If the original form from Part 1 is different from the neutral grammatic form from Part 2, explain that difference including all the details.
   */
  origin: string;
  /**
   * Three sentence examples of the usage of the original word in the same grammatic form followed by an translation in the language defined by a `languageTranslated` property. The sentence and the translation should be separated by one new line, while the examples themselves should be separated by three new lines. If there was a context from which that word was taken, include a phrase from that context in examples, replacing the first example.
   */
  examples: {
    /**
     * An example sentence in the original language using the word.
     */
    original: string;
    /**
     * The translation of the example sentence in the language defined by a `languageTranslated` property.
     */
    translation: string;
    [k: string]: unknown;
  }[];
  /**
   * The date and time when the word was exported to CSV.
   */
  csvExportedAt?: string;
  [k: string]: unknown;
}
export interface MessageParseTextToForeign {
  input: {
    name: "parseTextToForeign";
    data: {
      text: string;
      nativeLanguages: NativeLanguages;
      /**
       * The BCP 47 language tag of the language that the user wants to translate the text to.
       */
      primaryForeignLanguage: string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * The result of parsing the text for futher translation.
   */
  output?: {
    /**
     * The list of possible translations. It should include not only direct translations, but also different ways of saying that. As if answering the question: 'How to say {data.text} in {data.primaryForeignLanguage}'? The first item in the list should be the best fitting the original context from the user input text that was sent for this parsing. Each translations should come in an array, split into grammatical parts. It is a 'reverse' translation, meaning that the `text` property should have the translated part in `primaryForeignLanguage` language
     */
    translationChoices: {
      /**
       * Split the text into grammatical parts. A part should be a dictionary entry like a single word or a famous phrase, it is something that can be defined or translated. Do not include symbols, unless they are the integral part of a phrase.
       */
      definitionParts: {
        /**
         * The text of the foreign language translation part split
         */
        text: string;
        /**
         * A short translation of the definition part without additional formatting. Among several translation choices, choose the one that is the best fitting the original context from the user input text that was sent for this parsing.
         */
        translationToNative?: string;
        /**
         * The BCP 47 language tag of the translation language. It should match the requested 'primaryForeignLanguage'.
         */
        languageForeign?: string;
        /**
         * The BCP 47 language tag of the native language matching the part of the original text. Null for unknown
         */
        languageNative?: string | null;
        [k: string]: unknown;
      }[];
      /**
       * The full translation of the text to the requested language.
       */
      translation: {
        text: string;
        /**
         * The BCP 47 language tag of the language of the translation. It should match the requested 'primaryForeignLanguage'
         */
        language: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }[];
    [k: string]: unknown;
  };
  [k: string]: unknown;
}

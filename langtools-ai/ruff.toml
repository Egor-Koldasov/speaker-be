# # Increased line length for AI/ML code with long prompts and complex type annotations
line-length = 100
target-version = "py313" # Upgraded for better language features

# # Source code discovery
# src = ["src"]
# extend-exclude = [
#     "venv",
#     ".venv", 
#     "build",
#     "dist",
#     "*.egg-info",
# ]

[lint]
# Focus on performance and code integrity, not style
select = [
  #     # Core Python errors and issues
  "E", # pycodestyle errors (syntax and indentation errors)
  "F", # pyflakes (undefined names, unused imports, etc.)
  #     "W",      # pycodestyle warnings (bare except, etc.)

  #     # Code quality and performance
  #     "B",      # flake8-bugbear (likely bugs and design problems)
  #     "C4",     # flake8-comprehensions (unnecessary comprehensions)
  #     "UP",     # pyupgrade (outdated Python syntax)
  #     "ASYNC",  # flake8-async (async/await anti-patterns)
  #     "PERF",   # perflint (performance anti-patterns)

  #     # Security
  #     "S",      # flake8-bandit (security issues)

  #     # Import organization
  #     "I",      # isort (import sorting)
  #     "TID",    # flake8-tidy-imports (banned imports)
  #     "INP",    # flake8-no-pep420 (implicit namespace packages)

  # Type safety - only where inference fails
  "ANN001", # Missing type annotation for function argument
  "ANN002", # Missing type annotation for *args
  "ANN003", # Missing type annotation for **kwargs
  "ANN401", # Dynamically typed expressions (Any) are disallowed

  #     # Code complexity
  #     "C90",    # mccabe (cyclomatic complexity)

  #     # Error handling
  #     "BLE",    # flake8-blind-except (blind exception catching)
  #     "TRY",    # tryceratops (exception handling anti-patterns)

  # Resource management
  #     "SIM",    # flake8-simplify (code simplification)
  "ARG", # flake8-unused-arguments (unused function arguments)
  #     "RET",    # flake8-return (unnecessary returns)
  #     "PIE",    # flake8-pie (unnecessary code patterns)
  #     "RUF",    # ruff-specific rules (various checks)
]

# Ignore rules - minimal set focused on practicality
# ignore = [
#     # Allow flexibility for AI/ML code patterns
#     "S101",    # Allow assert in non-test code (used for runtime checks)
#     "C901",    # Allow complex functions (AI/ML often requires complexity)

#     # Error message patterns
#     "TRY003",  # Long messages in exceptions (clearer inline messages)

#     # Unicode in comments/strings (for multilingual examples)
#     "RUF001",  # Ambiguous unicode characters in strings
#     "RUF003",  # Ambiguous unicode characters in comments

#     # Async patterns
#     "ASYNC109", # Async function with no await (sometimes needed for interfaces)
# ]

# Allow auto-fixing for safe rules
fixable = [
  "ALL",
  #     "I",      # isort (import sorting)
  #     "UP",     # pyupgrade (modern Python features)
  #     "F",      # pyflakes fixes
  #     "SIM",    # flake8-simplify (code simplification)
  #     "PIE",    # flake8-pie (unnecessary patterns)
  #     "RUF",    # ruff-specific rules
]

# [lint.per-file-ignores]
# # __init__.py files
# "__init__.py" = [
#     "F401",    # Unused imports (re-exports)
# ]

# Manual test file - special case
# "test_manual.py" = [
#     "T20",     # Print statements are expected in manual tests
#     "T201",    # Print found
# ]

# [lint.mccabe]
# # Complexity threshold
# max-complexity = 15

# [lint.flake8-annotations]
# # Focus on where types can't be inferred
# allow-star-arg-any = true   # Allow Any in *args/**kwargs
# ignore-fully-untyped = true # Don't require annotations if types can be inferred

# [lint.isort]
# # Import sorting
# known-first-party = ["langtools"]

# FORMATTER CONFIGURATION
# [format]
# # Basic formatting rules
# quote-style = "double"
# indent-style = "space"
# line-ending = "auto"

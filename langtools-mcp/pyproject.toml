[project]
name = "langtools-mcp"
version = "0.1.0"
description = "MCP server for language learning tools"
dependencies = [
    "mcp>=1.2.0",
    "fastmcp>=2.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.7.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "types-requests>=2.31.0",  # Type stubs for requests
]

[project.scripts]
langtools-mcp = "langtools.mcp.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/langtools"]

[tool.mypy]
# Strict configuration with practical exceptions for LangChain integration
strict = true
python_version = "3.10"  # Required for FastMCP library compatibility
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
# Disabled some Any checks for LangChain compatibility
# disallow_any_unimported = true
# disallow_any_expr = true
# disallow_any_decorated = true
disallow_any_explicit = false  # Allow explicit Any for LangChain interfaces
# disallow_any_generics = true
# disallow_subclassing_any = true

# Async-specific configurations (warn_unused_awaits is not available in mypy 1.7)

# Comprehensive warnings
warn_no_return = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
warn_incomplete_stub = true

# Pydantic integration
plugins = ["pydantic.mypy"]

# Per-module configurations for better third-party library handling
[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langchain_openai.*", 
    "langchain_anthropic.*",
    "langchain_core.*",
    "fastmcp.*",
    "mcp.*",
    "anthropic.*",
    "openai.*"
]
ignore_missing_imports = true
# Still strict for our code that imports these
disallow_any_unimported = false

# Allow some flexibility for test files only
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
# But still no Any in tests
disallow_any_expr = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.ruff]
# Increased line length for AI/ML code with long prompts and complex type annotations
line-length = 100
target-version = "py39"  # Upgraded for better language features

# Source code discovery
src = ["src"]
extend-exclude = [
    "venv",
    ".venv", 
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Comprehensive rule selection for modern Python AI/ML project
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort (import sorting)
    "B",      # flake8-bugbear (bug and design problems)
    "C4",     # flake8-comprehensions (better comprehensions)
    "UP",     # pyupgrade (modern Python features)
    "ASYNC",  # flake8-async (async/await patterns)
    "S",      # flake8-bandit (security)
    "C90",    # mccabe (complexity)
    "N",      # pep8-naming (naming conventions)
    "ANN",    # flake8-annotations (type annotations) - STRICT
    "BLE",    # flake8-blind-except (better exception handling)
    "FBT",    # flake8-boolean-trap (boolean trap anti-pattern)
    "A",      # flake8-builtins (builtin shadowing)
    "COM",    # flake8-commas (trailing commas)
    "DTZ",    # flake8-datetimez (datetime timezone)
    "EM",     # flake8-errmsg (error messages)
    "G",      # flake8-logging-format (logging format)
    "INP",    # flake8-no-pep420 (implicit namespace packages)
    "PIE",    # flake8-pie (misc improvements)
    "T20",    # flake8-print (print statements)
    "PT",     # flake8-pytest-style (pytest style)
    "Q",      # flake8-quotes (quote style)
    "RSE",    # flake8-raise (raise statements)
    "RET",    # flake8-return (return statements)
    "SLF",    # flake8-self (private member access)
    "SLOT",   # flake8-slots (slots usage)
    "SIM",    # flake8-simplify (code simplification)
    "TID",    # flake8-tidy-imports (import organization)
    "ARG",    # flake8-unused-arguments (unused arguments)
    "PTH",    # flake8-use-pathlib (pathlib usage)
    "PL",     # pylint (comprehensive linting)
    "TRY",    # tryceratops (exception handling)
    "FLY",    # flynt (f-string usage)
    "PERF",   # perflint (performance)
    "RUF",    # ruff-specific rules
]

# Ignore specific rules that are too strict for AI/ML development
ignore = [
    # ANN101 and ANN102 are deprecated rules - removed
    "ANN401",  # Allow Any usage for LangChain integration
    "S101",    # Use of `assert` detected (common in ML/AI code)
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "COM819",  # Trailing comma prohibited (conflicts with formatter)
    "E501",    # Line too long (handled by line-length setting)
    "PLR0913", # Too many arguments to function call (common in ML/AI)
    "PLR0912", # Too many branches (common in ML/AI)
    "PLR0915", # Too many statements (common in ML/AI)
    "PLR2004", # Magic value used in comparison (common in ML/AI)
    "FBT002",  # Boolean default value in function definition (common in ML/AI)
    "TRY003",  # Avoid specifying long messages outside the exception class (too strict)
    "EM101",   # Exception must not use a string literal (too strict for custom exceptions)
    "G004",    # Logging statement uses f-string (modern Python practice)
    "PT011",   # `pytest.raises` is too broad (false positives)
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes (not relevant for AI/ML)
    "PLR0911", # Too many return statements (common in ML/AI functions)
]

# Allow auto-fixing for safe rules
fixable = [
    "I",      # isort (import sorting)
    "UP",     # pyupgrade (modern Python features)
    "COM",    # flake8-commas (trailing commas)
    "Q",      # flake8-quotes (quote style)
    "W",      # pycodestyle warnings
    "FLY",    # flynt (f-string usage)
    "PIE",    # flake8-pie (misc improvements)
    "SIM",    # flake8-simplify (code simplification)
    "RUF",    # ruff-specific rules
]

# Files to never auto-fix
unfixable = [
    "F401",   # Unused imports (might be used in __init__.py)
    "F841",   # Unused variables (might be intentional)
]

[tool.ruff.lint.per-file-ignores]
# Test files can be more lenient
"tests/**/*.py" = [
    "S101",    # Use of assert is fine in tests
    "PLR0913", # Many arguments are fine in test functions
    "SLF001",  # Private member access is fine in tests
    "RUF001",  # Allow ambiguous characters in test data
    "RUF003",  # Allow ambiguous characters in test comments
    "ANN001",  # Missing type annotations for function arguments (test mocks)
    "ANN201",  # Missing return type annotations for test functions
    "PT012",   # Multiple statements in pytest.raises (acceptable in tests)
    "PT023",   # Use @pytest.mark.asyncio() over @pytest.mark.asyncio
    "SIM117",  # Nested with statements more readable in tests than cramming into one line
]

# __init__.py files can have unused imports
"__init__.py" = [
    "F401",    # Unused imports (re-exports)
    "F403",    # Star imports (re-exports)
]

# Migration/script files can be more lenient
"scripts/**/*.py" = [
    "T20",     # Print statements are fine in scripts
    "S101",    # Assert statements are fine in scripts
]

# Server files - specific exceptions for cleaner error handling patterns
"**/server.py" = [
    "TRY300",  # Current try/return pattern is cleaner than else block style
]

[tool.ruff.lint.mccabe]
# Complexity threshold (default 10, relaxed for AI/ML)
max-complexity = 15

[tool.ruff.lint.flake8-quotes]
# Use double quotes consistently
inline-quotes = "double"

[tool.ruff.lint.flake8-annotations]
# STRICT: Require type annotations everywhere
allow-star-arg-any = false  # Require proper typing for *args/**kwargs
ignore-fully-untyped = false  # Don't ignore untyped functions

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["langtools"]
force-single-line = false
lines-between-types = 1
lines-after-imports = 2

[tool.ruff.lint.flake8-pytest-style]
# Pytest style configuration
fixture-parentheses = true
mark-parentheses = true

[tool.ruff.lint.pylint]
# Pylint configuration
max-args = 10  # More lenient for AI/ML functions
max-branches = 20  # More lenient for AI/ML logic
max-returns = 10  # More lenient for AI/ML functions
max-statements = 75  # More lenient for AI/ML functions

# FORMATTER CONFIGURATION
[tool.ruff.format]
# Use double quotes consistently
quote-style = "double"

# Use spaces around operators
skip-magic-trailing-comma = false

# Indent with 4 spaces
indent-style = "space"

# Line ending style
line-ending = "auto"

# Respect existing line breaks in certain cases
docstring-code-format = true
docstring-code-line-length = 80

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
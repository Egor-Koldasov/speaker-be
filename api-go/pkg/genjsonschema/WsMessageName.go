// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"
import "reflect"

type WsMessageName string

const WsMessageNameLenseQuery WsMessageName = "LenseQuery"
const WsMessageNameMutation WsMessageName = "Mutation"

var enumValues_WsMessageName = []interface{}{
	"LenseQuery",
	"Mutation",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WsMessageName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WsMessageName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WsMessageName, v)
	}
	*j = WsMessageName(v)
	return nil
}

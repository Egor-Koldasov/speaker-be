// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"
import "reflect"

type MessageGetDecks struct {
	// Input corresponds to the JSON schema field "input".
	Input MessageGetDecksInput `json:"input" yaml:"input" mapstructure:"input"`

	// Output corresponds to the JSON schema field "output".
	Output MessageGetDecksOutput `json:"output" yaml:"output" mapstructure:"output"`
}

type MessageGetDecksInput struct {
	// AuthToken corresponds to the JSON schema field "authToken".
	AuthToken *string `json:"authToken,omitempty" yaml:"authToken,omitempty" mapstructure:"authToken,omitempty"`

	// Data corresponds to the JSON schema field "data".
	Data MessageGetDecksInputData `json:"data" yaml:"data" mapstructure:"data"`

	// Id corresponds to the JSON schema field "id".
	Id *Id `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name MessageGetDecksInputName `json:"name" yaml:"name" mapstructure:"name"`
}

type MessageGetDecksInputData map[string]interface{}

type MessageGetDecksInputName string

const MessageGetDecksInputNameGetDecks MessageGetDecksInputName = "GetDecks"

var enumValues_MessageGetDecksInputName = []interface{}{
	"GetDecks",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetDecksInputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageGetDecksInputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageGetDecksInputName, v)
	}
	*j = MessageGetDecksInputName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetDecksInput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in MessageGetDecksInput: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in MessageGetDecksInput: required")
	}
	type Plain MessageGetDecksInput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageGetDecksInput(plain)
	return nil
}

type MessageGetDecksOutput struct {
	// Data corresponds to the JSON schema field "data".
	Data *MessageGetDecksOutputData `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Errors corresponds to the JSON schema field "errors".
	Errors []AppError `json:"errors" yaml:"errors" mapstructure:"errors"`

	// Id corresponds to the JSON schema field "id".
	Id Id `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name MessageGetDecksOutputName `json:"name" yaml:"name" mapstructure:"name"`
}

type MessageGetDecksOutputData struct {
	// Decks corresponds to the JSON schema field "decks".
	Decks []Deck `json:"decks" yaml:"decks" mapstructure:"decks"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetDecksOutputData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["decks"]; raw != nil && !ok {
		return fmt.Errorf("field decks in MessageGetDecksOutputData: required")
	}
	type Plain MessageGetDecksOutputData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageGetDecksOutputData(plain)
	return nil
}

type MessageGetDecksOutputName string

const MessageGetDecksOutputNameGetDecks MessageGetDecksOutputName = "GetDecks"

var enumValues_MessageGetDecksOutputName = []interface{}{
	"GetDecks",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetDecksOutputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageGetDecksOutputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageGetDecksOutputName, v)
	}
	*j = MessageGetDecksOutputName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetDecksOutput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["errors"]; raw != nil && !ok {
		return fmt.Errorf("field errors in MessageGetDecksOutput: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in MessageGetDecksOutput: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in MessageGetDecksOutput: required")
	}
	type Plain MessageGetDecksOutput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageGetDecksOutput(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetDecks) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["input"]; raw != nil && !ok {
		return fmt.Errorf("field input in MessageGetDecks: required")
	}
	if _, ok := raw["output"]; raw != nil && !ok {
		return fmt.Errorf("field output in MessageGetDecks: required")
	}
	type Plain MessageGetDecks
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageGetDecks(plain)
	return nil
}

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type LensQueryUserResponse struct {
	// AuthToken corresponds to the JSON schema field "authToken".
	AuthToken *string `json:"authToken" yaml:"authToken" mapstructure:"authToken"`

	// Data corresponds to the JSON schema field "data".
	Data LensQueryUserResponseData `json:"data" yaml:"data" mapstructure:"data"`

	// Errors corresponds to the JSON schema field "errors".
	Errors []AppError `json:"errors" yaml:"errors" mapstructure:"errors"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name interface{} `json:"name" yaml:"name" mapstructure:"name"`

	// ResponseForId corresponds to the JSON schema field "responseForId".
	ResponseForId string `json:"responseForId" yaml:"responseForId" mapstructure:"responseForId"`
}

type LensQueryUserResponseData struct {
	// QueryName corresponds to the JSON schema field "queryName".
	QueryName interface{} `json:"queryName" yaml:"queryName" mapstructure:"queryName"`

	// QueryParams corresponds to the JSON schema field "queryParams".
	QueryParams LensQueryUserResponseDataQueryParams `json:"queryParams" yaml:"queryParams" mapstructure:"queryParams"`
}

type LensQueryUserResponseDataQueryParams struct {
	// User corresponds to the JSON schema field "user".
	User User `json:"user" yaml:"user" mapstructure:"user"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LensQueryUserResponseDataQueryParams) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["user"]; raw != nil && !ok {
		return fmt.Errorf("field user in LensQueryUserResponseDataQueryParams: required")
	}
	type Plain LensQueryUserResponseDataQueryParams
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LensQueryUserResponseDataQueryParams(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LensQueryUserResponseData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["queryName"]; raw != nil && !ok {
		return fmt.Errorf("field queryName in LensQueryUserResponseData: required")
	}
	if _, ok := raw["queryParams"]; raw != nil && !ok {
		return fmt.Errorf("field queryParams in LensQueryUserResponseData: required")
	}
	type Plain LensQueryUserResponseData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LensQueryUserResponseData(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LensQueryUserResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["authToken"]; raw != nil && !ok {
		return fmt.Errorf("field authToken in LensQueryUserResponse: required")
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in LensQueryUserResponse: required")
	}
	if _, ok := raw["errors"]; raw != nil && !ok {
		return fmt.Errorf("field errors in LensQueryUserResponse: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in LensQueryUserResponse: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in LensQueryUserResponse: required")
	}
	if _, ok := raw["responseForId"]; raw != nil && !ok {
		return fmt.Errorf("field responseForId in LensQueryUserResponse: required")
	}
	type Plain LensQueryUserResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LensQueryUserResponse(plain)
	return nil
}

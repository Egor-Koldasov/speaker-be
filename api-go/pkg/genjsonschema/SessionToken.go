// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type SessionToken struct {
	// ISO 8601 date string
	CreatedAt string `json:"createdAt" yaml:"createdAt" mapstructure:"createdAt"`

	// ISO 8601 date string or null
	DeletedAt *string `json:"deletedAt" yaml:"deletedAt" mapstructure:"deletedAt"`

	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id" yaml:"id" mapstructure:"id"`

	// TokenCode corresponds to the JSON schema field "tokenCode".
	TokenCode string `json:"tokenCode" yaml:"tokenCode" mapstructure:"tokenCode"`

	// ISO 8601 date string
	UpdatedAt string `json:"updatedAt" yaml:"updatedAt" mapstructure:"updatedAt"`

	// UserId corresponds to the JSON schema field "userId".
	UserId string `json:"userId" yaml:"userId" mapstructure:"userId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SessionToken) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["createdAt"]; raw != nil && !ok {
		return fmt.Errorf("field createdAt in SessionToken: required")
	}
	if _, ok := raw["deletedAt"]; raw != nil && !ok {
		return fmt.Errorf("field deletedAt in SessionToken: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in SessionToken: required")
	}
	if _, ok := raw["tokenCode"]; raw != nil && !ok {
		return fmt.Errorf("field tokenCode in SessionToken: required")
	}
	if _, ok := raw["updatedAt"]; raw != nil && !ok {
		return fmt.Errorf("field updatedAt in SessionToken: required")
	}
	if _, ok := raw["userId"]; raw != nil && !ok {
		return fmt.Errorf("field userId in SessionToken: required")
	}
	type Plain SessionToken
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SessionToken(plain)
	return nil
}

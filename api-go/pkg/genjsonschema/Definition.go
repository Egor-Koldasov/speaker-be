// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type DefinitionExamplesElem struct {
	// An example sentence in the original language using the word.
	Original string `json:"original" yaml:"original" mapstructure:"original"`

	// The translation of the example sentence in the language defined by a
	// `languageTranslated` property.
	Translation string `json:"translation" yaml:"translation" mapstructure:"translation"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DefinitionExamplesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["original"]; !ok || v == nil {
		return fmt.Errorf("field original in DefinitionExamplesElem: required")
	}
	if v, ok := raw["translation"]; !ok || v == nil {
		return fmt.Errorf("field translation in DefinitionExamplesElem: required")
	}
	type Plain DefinitionExamplesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DefinitionExamplesElem(plain)
	return nil
}

type DefinitionPronounciationsElem struct {
	// A description of the pronunciation. Like the area where it is commonly used.
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// A pronunciation of the original word given.
	Transcription string `json:"transcription" yaml:"transcription" mapstructure:"transcription"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DefinitionPronounciationsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description in DefinitionPronounciationsElem: required")
	}
	if v, ok := raw["transcription"]; !ok || v == nil {
		return fmt.Errorf("field transcription in DefinitionPronounciationsElem: required")
	}
	type Plain DefinitionPronounciationsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DefinitionPronounciationsElem(plain)
	return nil
}

// A detailed representation of a definition, including its original and neutral
// forms, pronunciations, translations, definitions, origin, and usage examples.
type Definition struct {
	// An extensive definition in the original language.
	DefinitionOriginal string `json:"definitionOriginal" yaml:"definitionOriginal" mapstructure:"definitionOriginal"`

	// An extensive definition in the language defined by a `languageTranslated`
	// property.
	DefinitionTranslated string `json:"definitionTranslated" yaml:"definitionTranslated" mapstructure:"definitionTranslated"`

	// Three sentence examples of the usage of the original word in the same grammatic
	// form followed by an translation in the language defined by a
	// `languageTranslated` property. The sentence and the translation should be
	// separated by one new line, while the examples themselves should be separated by
	// three new lines. If there was a context from which that word was taken, include
	// a phrase from that context in examples, replacing the first example.
	Examples []DefinitionExamplesElem `json:"examples" yaml:"examples" mapstructure:"examples"`

	// The original language of the word in a BCP 47 format.
	LanguageOriginal string `json:"languageOriginal" yaml:"languageOriginal" mapstructure:"languageOriginal"`

	// The language the word is translated to in a BCP 47 format.
	LanguageTranslated string `json:"languageTranslated" yaml:"languageTranslated" mapstructure:"languageTranslated"`

	// The word in a neutral grammatic form.
	NeutralForm string `json:"neutralForm" yaml:"neutralForm" mapstructure:"neutralForm"`

	// The root parts of the word and the origin in the language defined by a
	// `languageTranslated` property. If the original form from Part 1 is different
	// from the neutral grammatic form from Part 2, explain that difference including
	// all the details.
	Origin string `json:"origin" yaml:"origin" mapstructure:"origin"`

	// The original word given, in the exact same grammatic form, capitalized.
	OriginalWord string `json:"originalWord" yaml:"originalWord" mapstructure:"originalWord"`

	// Pronounciations corresponds to the JSON schema field "pronounciations".
	Pronounciations []DefinitionPronounciationsElem `json:"pronounciations" yaml:"pronounciations" mapstructure:"pronounciations"`

	// Common synonyms in the original language.
	Synonyms []string `json:"synonyms" yaml:"synonyms" mapstructure:"synonyms"`

	// An extensive translation to the language defined by a `languageTranslated`
	// property, the more words the better. In case of multiple meanings, include all
	// of them.
	Translation string `json:"translation" yaml:"translation" mapstructure:"translation"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Definition) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["definitionOriginal"]; !ok || v == nil {
		return fmt.Errorf("field definitionOriginal in Definition: required")
	}
	if v, ok := raw["definitionTranslated"]; !ok || v == nil {
		return fmt.Errorf("field definitionTranslated in Definition: required")
	}
	if v, ok := raw["examples"]; !ok || v == nil {
		return fmt.Errorf("field examples in Definition: required")
	}
	if v, ok := raw["languageOriginal"]; !ok || v == nil {
		return fmt.Errorf("field languageOriginal in Definition: required")
	}
	if v, ok := raw["languageTranslated"]; !ok || v == nil {
		return fmt.Errorf("field languageTranslated in Definition: required")
	}
	if v, ok := raw["neutralForm"]; !ok || v == nil {
		return fmt.Errorf("field neutralForm in Definition: required")
	}
	if v, ok := raw["origin"]; !ok || v == nil {
		return fmt.Errorf("field origin in Definition: required")
	}
	if v, ok := raw["originalWord"]; !ok || v == nil {
		return fmt.Errorf("field originalWord in Definition: required")
	}
	if v, ok := raw["pronounciations"]; !ok || v == nil {
		return fmt.Errorf("field pronounciations in Definition: required")
	}
	if v, ok := raw["synonyms"]; !ok || v == nil {
		return fmt.Errorf("field synonyms in Definition: required")
	}
	if v, ok := raw["translation"]; !ok || v == nil {
		return fmt.Errorf("field translation in Definition: required")
	}
	type Plain Definition
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if plain.Pronounciations != nil && len(plain.Pronounciations) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "pronounciations", 1)
	}
	*j = Definition(plain)
	return nil
}

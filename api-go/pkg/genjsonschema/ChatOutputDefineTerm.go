// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type ChatOutputDefineTerm struct {
	// Data corresponds to the JSON schema field "data".
	Data ChatOutputDefineTermData `json:"data" yaml:"data" mapstructure:"data"`

	// Errors corresponds to the JSON schema field "errors".
	Errors []ChatAiError `json:"errors" yaml:"errors" mapstructure:"errors"`
}

type ChatOutputDefineTermData interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatOutputDefineTerm) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in ChatOutputDefineTerm: required")
	}
	if v, ok := raw["errors"]; !ok || v == nil {
		return fmt.Errorf("field errors in ChatOutputDefineTerm: required")
	}
	type Plain ChatOutputDefineTerm
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatOutputDefineTerm(plain)
	return nil
}

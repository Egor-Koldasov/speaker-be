// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type ActionCreateCardConfig struct {
	// AuthToken corresponds to the JSON schema field "authToken".
	AuthToken *string `json:"authToken" yaml:"authToken" mapstructure:"authToken"`

	// Data corresponds to the JSON schema field "data".
	Data ActionCreateCardConfigData `json:"data" yaml:"data" mapstructure:"data"`

	// Errors corresponds to the JSON schema field "errors".
	Errors []AppError `json:"errors" yaml:"errors" mapstructure:"errors"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name interface{} `json:"name" yaml:"name" mapstructure:"name"`
}

type ActionCreateCardConfigData struct {
	// ActionName corresponds to the JSON schema field "actionName".
	ActionName interface{} `json:"actionName" yaml:"actionName" mapstructure:"actionName"`

	// ActionParams corresponds to the JSON schema field "actionParams".
	ActionParams ActionCreateCardConfigDataActionParams `json:"actionParams" yaml:"actionParams" mapstructure:"actionParams"`
}

type ActionCreateCardConfigDataActionParams struct {
	// CardConfig corresponds to the JSON schema field "cardConfig".
	CardConfig CardConfig `json:"cardConfig" yaml:"cardConfig" mapstructure:"cardConfig"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionCreateCardConfigDataActionParams) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["cardConfig"]; raw != nil && !ok {
		return fmt.Errorf("field cardConfig in ActionCreateCardConfigDataActionParams: required")
	}
	type Plain ActionCreateCardConfigDataActionParams
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActionCreateCardConfigDataActionParams(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionCreateCardConfigData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["actionName"]; raw != nil && !ok {
		return fmt.Errorf("field actionName in ActionCreateCardConfigData: required")
	}
	if _, ok := raw["actionParams"]; raw != nil && !ok {
		return fmt.Errorf("field actionParams in ActionCreateCardConfigData: required")
	}
	type Plain ActionCreateCardConfigData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActionCreateCardConfigData(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionCreateCardConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["authToken"]; raw != nil && !ok {
		return fmt.Errorf("field authToken in ActionCreateCardConfig: required")
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in ActionCreateCardConfig: required")
	}
	if _, ok := raw["errors"]; raw != nil && !ok {
		return fmt.Errorf("field errors in ActionCreateCardConfig: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in ActionCreateCardConfig: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in ActionCreateCardConfig: required")
	}
	type Plain ActionCreateCardConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActionCreateCardConfig(plain)
	return nil
}

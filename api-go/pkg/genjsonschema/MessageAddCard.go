// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"
import "reflect"

type MessageAddCard struct {
	// Input corresponds to the JSON schema field "input".
	Input MessageAddCardInput `json:"input" yaml:"input" mapstructure:"input"`

	// Output corresponds to the JSON schema field "output".
	Output MessageAddCardOutput `json:"output" yaml:"output" mapstructure:"output"`
}

type MessageAddCardInput struct {
	// AuthToken corresponds to the JSON schema field "authToken".
	AuthToken *string `json:"authToken,omitempty" yaml:"authToken,omitempty" mapstructure:"authToken,omitempty"`

	// Data corresponds to the JSON schema field "data".
	Data MessageAddCardInputData `json:"data" yaml:"data" mapstructure:"data"`

	// Id corresponds to the JSON schema field "id".
	Id *Id `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name MessageAddCardInputName `json:"name" yaml:"name" mapstructure:"name"`
}

type MessageAddCardInputData struct {
	// Card corresponds to the JSON schema field "card".
	Card Card `json:"card" yaml:"card" mapstructure:"card"`

	// DeckId corresponds to the JSON schema field "deckId".
	DeckId string `json:"deckId" yaml:"deckId" mapstructure:"deckId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageAddCardInputData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["card"]; raw != nil && !ok {
		return fmt.Errorf("field card in MessageAddCardInputData: required")
	}
	if _, ok := raw["deckId"]; raw != nil && !ok {
		return fmt.Errorf("field deckId in MessageAddCardInputData: required")
	}
	type Plain MessageAddCardInputData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageAddCardInputData(plain)
	return nil
}

type MessageAddCardInputName string

const MessageAddCardInputNameAddCard MessageAddCardInputName = "AddCard"

var enumValues_MessageAddCardInputName = []interface{}{
	"AddCard",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageAddCardInputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageAddCardInputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageAddCardInputName, v)
	}
	*j = MessageAddCardInputName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageAddCardInput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in MessageAddCardInput: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in MessageAddCardInput: required")
	}
	type Plain MessageAddCardInput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageAddCardInput(plain)
	return nil
}

type MessageAddCardOutput struct {
	// Data corresponds to the JSON schema field "data".
	Data MessageAddCardOutputData `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Errors corresponds to the JSON schema field "errors".
	Errors []AppError `json:"errors" yaml:"errors" mapstructure:"errors"`

	// Id corresponds to the JSON schema field "id".
	Id Id `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name MessageAddCardOutputName `json:"name" yaml:"name" mapstructure:"name"`
}

type MessageAddCardOutputData map[string]interface{}

type MessageAddCardOutputName string

const MessageAddCardOutputNameAddCard MessageAddCardOutputName = "AddCard"

var enumValues_MessageAddCardOutputName = []interface{}{
	"AddCard",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageAddCardOutputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageAddCardOutputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageAddCardOutputName, v)
	}
	*j = MessageAddCardOutputName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageAddCardOutput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["errors"]; raw != nil && !ok {
		return fmt.Errorf("field errors in MessageAddCardOutput: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in MessageAddCardOutput: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in MessageAddCardOutput: required")
	}
	type Plain MessageAddCardOutput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageAddCardOutput(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageAddCard) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["input"]; raw != nil && !ok {
		return fmt.Errorf("field input in MessageAddCard: required")
	}
	if _, ok := raw["output"]; raw != nil && !ok {
		return fmt.Errorf("field output in MessageAddCard: required")
	}
	type Plain MessageAddCard
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageAddCard(plain)
	return nil
}

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"
import "reflect"

type ErrorName string

const ErrorNameAIResponseUnmarshal ErrorName = "AI_ResponseUnmarshal"
const ErrorNameAiCreateCompletion ErrorName = "Ai_CreateCompletion"
const ErrorNameAuthRequired ErrorName = "AuthRequired"
const ErrorNameChatAiError ErrorName = "ChatAiError"
const ErrorNameFromAiCritical ErrorName = "FromAi_Critical"
const ErrorNameInternal ErrorName = "Internal"
const ErrorNameJsonSchemaMessageInput ErrorName = "JsonSchema_MessageInput"
const ErrorNameJsonSchemaMessageOutput ErrorName = "JsonSchema_MessageOutput"
const ErrorNameNotFoundMessageName ErrorName = "NotFound_MessageName"
const ErrorNameUnknown ErrorName = "Unknown"

var enumValues_ErrorName = []interface{}{
	"Unknown",
	"Internal",
	"Ai_CreateCompletion",
	"AI_ResponseUnmarshal",
	"JsonSchema_MessageInput",
	"JsonSchema_MessageOutput",
	"NotFound_MessageName",
	"FromAi_Critical",
	"ChatAiError",
	"AuthRequired",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ErrorName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ErrorName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ErrorName, v)
	}
	*j = ErrorName(v)
	return nil
}

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type ChatGroupMap struct {
	// DefineTerm corresponds to the JSON schema field "DefineTerm".
	DefineTerm ChatGroupMapDefineTerm `json:"DefineTerm" yaml:"DefineTerm" mapstructure:"DefineTerm"`

	// ParseTextFromForeign corresponds to the JSON schema field
	// "ParseTextFromForeign".
	ParseTextFromForeign ChatGroupMapParseTextFromForeign `json:"ParseTextFromForeign" yaml:"ParseTextFromForeign" mapstructure:"ParseTextFromForeign"`
}

type ChatGroupMapDefineTerm struct {
	// Input corresponds to the JSON schema field "input".
	Input ChatInputDefineTerm `json:"input" yaml:"input" mapstructure:"input"`

	// Output corresponds to the JSON schema field "output".
	Output ChatOutputDefineTerm `json:"output" yaml:"output" mapstructure:"output"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatGroupMapDefineTerm) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["input"]; raw != nil && !ok {
		return fmt.Errorf("field input in ChatGroupMapDefineTerm: required")
	}
	if _, ok := raw["output"]; raw != nil && !ok {
		return fmt.Errorf("field output in ChatGroupMapDefineTerm: required")
	}
	type Plain ChatGroupMapDefineTerm
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatGroupMapDefineTerm(plain)
	return nil
}

type ChatGroupMapParseTextFromForeign struct {
	// Input corresponds to the JSON schema field "input".
	Input ChatInputParseTextFromForeign `json:"input" yaml:"input" mapstructure:"input"`

	// Output corresponds to the JSON schema field "output".
	Output ChatOutputParseTextFromForeign `json:"output" yaml:"output" mapstructure:"output"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatGroupMapParseTextFromForeign) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["input"]; raw != nil && !ok {
		return fmt.Errorf("field input in ChatGroupMapParseTextFromForeign: required")
	}
	if _, ok := raw["output"]; raw != nil && !ok {
		return fmt.Errorf("field output in ChatGroupMapParseTextFromForeign: required")
	}
	type Plain ChatGroupMapParseTextFromForeign
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatGroupMapParseTextFromForeign(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatGroupMap) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["DefineTerm"]; raw != nil && !ok {
		return fmt.Errorf("field DefineTerm in ChatGroupMap: required")
	}
	if _, ok := raw["ParseTextFromForeign"]; raw != nil && !ok {
		return fmt.Errorf("field ParseTextFromForeign in ChatGroupMap: required")
	}
	type Plain ChatGroupMap
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatGroupMap(plain)
	return nil
}

type Main struct {
	// WsMessageBase corresponds to the JSON schema field "WsMessageBase".
	WsMessageBase WsMessageBase `json:"WsMessageBase" yaml:"WsMessageBase" mapstructure:"WsMessageBase"`

	// WsMessageName corresponds to the JSON schema field "WsMessageName".
	WsMessageName WsMessageName `json:"WsMessageName" yaml:"WsMessageName" mapstructure:"WsMessageName"`

	// WsMessageNameEventToServer corresponds to the JSON schema field
	// "WsMessageNameEventToServer".
	WsMessageNameEventToServer WsMessageNameEventToServer `json:"WsMessageNameEventToServer" yaml:"WsMessageNameEventToServer" mapstructure:"WsMessageNameEventToServer"`

	// WsMessageNameRequestToServer corresponds to the JSON schema field
	// "WsMessageNameRequestToServer".
	WsMessageNameRequestToServer WsMessageNameRequestToServer `json:"WsMessageNameRequestToServer" yaml:"WsMessageNameRequestToServer" mapstructure:"WsMessageNameRequestToServer"`

	// WsMessageType corresponds to the JSON schema field "WsMessageType".
	WsMessageType WsMessageType `json:"WsMessageType" yaml:"WsMessageType" mapstructure:"WsMessageType"`

	// LensModel corresponds to the JSON schema field "lensModel".
	LensModel MainLensModel `json:"lensModel" yaml:"lensModel" mapstructure:"lensModel"`

	// Model corresponds to the JSON schema field "model".
	Model Models `json:"model" yaml:"model" mapstructure:"model"`
}

type MainLensModel interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Main) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["WsMessageBase"]; raw != nil && !ok {
		return fmt.Errorf("field WsMessageBase in Main: required")
	}
	if _, ok := raw["WsMessageName"]; raw != nil && !ok {
		return fmt.Errorf("field WsMessageName in Main: required")
	}
	if _, ok := raw["WsMessageNameEventToServer"]; raw != nil && !ok {
		return fmt.Errorf("field WsMessageNameEventToServer in Main: required")
	}
	if _, ok := raw["WsMessageNameRequestToServer"]; raw != nil && !ok {
		return fmt.Errorf("field WsMessageNameRequestToServer in Main: required")
	}
	if _, ok := raw["WsMessageType"]; raw != nil && !ok {
		return fmt.Errorf("field WsMessageType in Main: required")
	}
	if _, ok := raw["lensModel"]; raw != nil && !ok {
		return fmt.Errorf("field lensModel in Main: required")
	}
	if _, ok := raw["model"]; raw != nil && !ok {
		return fmt.Errorf("field model in Main: required")
	}
	type Plain Main
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Main(plain)
	return nil
}

type MessageMap struct {
	// AddCard corresponds to the JSON schema field "AddCard".
	AddCard MessageAddCard `json:"AddCard" yaml:"AddCard" mapstructure:"AddCard"`

	// DefineTerm corresponds to the JSON schema field "DefineTerm".
	DefineTerm MessageDefineTerm `json:"DefineTerm" yaml:"DefineTerm" mapstructure:"DefineTerm"`

	// GetAuthInfo corresponds to the JSON schema field "GetAuthInfo".
	GetAuthInfo MessageGetAuthInfo `json:"GetAuthInfo" yaml:"GetAuthInfo" mapstructure:"GetAuthInfo"`

	// GetCards corresponds to the JSON schema field "GetCards".
	GetCards MessageGetCards `json:"GetCards" yaml:"GetCards" mapstructure:"GetCards"`

	// GetDecks corresponds to the JSON schema field "GetDecks".
	GetDecks MessageGetDecks `json:"GetDecks" yaml:"GetDecks" mapstructure:"GetDecks"`

	// ParseTextFromForeign corresponds to the JSON schema field
	// "ParseTextFromForeign".
	ParseTextFromForeign MessageParseTextFromForeign `json:"ParseTextFromForeign" yaml:"ParseTextFromForeign" mapstructure:"ParseTextFromForeign"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageMap) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["AddCard"]; raw != nil && !ok {
		return fmt.Errorf("field AddCard in MessageMap: required")
	}
	if _, ok := raw["DefineTerm"]; raw != nil && !ok {
		return fmt.Errorf("field DefineTerm in MessageMap: required")
	}
	if _, ok := raw["GetAuthInfo"]; raw != nil && !ok {
		return fmt.Errorf("field GetAuthInfo in MessageMap: required")
	}
	if _, ok := raw["GetCards"]; raw != nil && !ok {
		return fmt.Errorf("field GetCards in MessageMap: required")
	}
	if _, ok := raw["GetDecks"]; raw != nil && !ok {
		return fmt.Errorf("field GetDecks in MessageMap: required")
	}
	if _, ok := raw["ParseTextFromForeign"]; raw != nil && !ok {
		return fmt.Errorf("field ParseTextFromForeign in MessageMap: required")
	}
	type Plain MessageMap
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageMap(plain)
	return nil
}

type Models struct {
	// AuthInfo corresponds to the JSON schema field "AuthInfo".
	AuthInfo AuthInfo `json:"AuthInfo" yaml:"AuthInfo" mapstructure:"AuthInfo"`

	// AuthSession corresponds to the JSON schema field "AuthSession".
	AuthSession AuthSession `json:"AuthSession" yaml:"AuthSession" mapstructure:"AuthSession"`

	// Card corresponds to the JSON schema field "Card".
	Card Card `json:"Card" yaml:"Card" mapstructure:"Card"`

	// MessageBase corresponds to the JSON schema field "MessageBase".
	MessageBase MessageBase `json:"MessageBase" yaml:"MessageBase" mapstructure:"MessageBase"`

	// Messages corresponds to the JSON schema field "messages".
	Messages MessageMap `json:"messages" yaml:"messages" mapstructure:"messages"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Models) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["AuthInfo"]; raw != nil && !ok {
		return fmt.Errorf("field AuthInfo in Models: required")
	}
	if _, ok := raw["AuthSession"]; raw != nil && !ok {
		return fmt.Errorf("field AuthSession in Models: required")
	}
	if _, ok := raw["Card"]; raw != nil && !ok {
		return fmt.Errorf("field Card in Models: required")
	}
	if _, ok := raw["MessageBase"]; raw != nil && !ok {
		return fmt.Errorf("field MessageBase in Models: required")
	}
	if _, ok := raw["messages"]; raw != nil && !ok {
		return fmt.Errorf("field messages in Models: required")
	}
	type Plain Models
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Models(plain)
	return nil
}

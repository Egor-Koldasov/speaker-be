// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type ChatGroupMap struct {
	// DefineTerm corresponds to the JSON schema field "DefineTerm".
	DefineTerm ChatGroupMapDefineTerm `json:"DefineTerm" yaml:"DefineTerm" mapstructure:"DefineTerm"`

	// ParseTextFromForeign corresponds to the JSON schema field
	// "ParseTextFromForeign".
	ParseTextFromForeign ChatGroupMapParseTextFromForeign `json:"ParseTextFromForeign" yaml:"ParseTextFromForeign" mapstructure:"ParseTextFromForeign"`
}

type ChatGroupMapDefineTerm struct {
	// Input corresponds to the JSON schema field "input".
	Input ChatInputDefineTerm `json:"input" yaml:"input" mapstructure:"input"`

	// Output corresponds to the JSON schema field "output".
	Output ChatOutputDefineTerm `json:"output" yaml:"output" mapstructure:"output"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatGroupMapDefineTerm) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["input"]; raw != nil && !ok {
		return fmt.Errorf("field input in ChatGroupMapDefineTerm: required")
	}
	if _, ok := raw["output"]; raw != nil && !ok {
		return fmt.Errorf("field output in ChatGroupMapDefineTerm: required")
	}
	type Plain ChatGroupMapDefineTerm
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatGroupMapDefineTerm(plain)
	return nil
}

type ChatGroupMapParseTextFromForeign struct {
	// Input corresponds to the JSON schema field "input".
	Input ChatInputParseTextFromForeign `json:"input" yaml:"input" mapstructure:"input"`

	// Output corresponds to the JSON schema field "output".
	Output ChatOutputParseTextFromForeign `json:"output" yaml:"output" mapstructure:"output"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatGroupMapParseTextFromForeign) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["input"]; raw != nil && !ok {
		return fmt.Errorf("field input in ChatGroupMapParseTextFromForeign: required")
	}
	if _, ok := raw["output"]; raw != nil && !ok {
		return fmt.Errorf("field output in ChatGroupMapParseTextFromForeign: required")
	}
	type Plain ChatGroupMapParseTextFromForeign
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatGroupMapParseTextFromForeign(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatGroupMap) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["DefineTerm"]; raw != nil && !ok {
		return fmt.Errorf("field DefineTerm in ChatGroupMap: required")
	}
	if _, ok := raw["ParseTextFromForeign"]; raw != nil && !ok {
		return fmt.Errorf("field ParseTextFromForeign in ChatGroupMap: required")
	}
	type Plain ChatGroupMap
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatGroupMap(plain)
	return nil
}

type Main struct {
	// LensModel corresponds to the JSON schema field "LensModel".
	LensModel MainLensModel `json:"LensModel" yaml:"LensModel" mapstructure:"LensModel"`

	// WsMessage corresponds to the JSON schema field "WsMessage".
	WsMessage MainWsMessage `json:"WsMessage" yaml:"WsMessage" mapstructure:"WsMessage"`

	// WsMessageBase corresponds to the JSON schema field "WsMessageBase".
	WsMessageBase WsMessageBase `json:"WsMessageBase" yaml:"WsMessageBase" mapstructure:"WsMessageBase"`

	// WsMessageName corresponds to the JSON schema field "WsMessageName".
	WsMessageName WsMessageName `json:"WsMessageName" yaml:"WsMessageName" mapstructure:"WsMessageName"`

	// WsMessageNameEventToServer corresponds to the JSON schema field
	// "WsMessageNameEventToServer".
	WsMessageNameEventToServer WsMessageNameEventToServer `json:"WsMessageNameEventToServer" yaml:"WsMessageNameEventToServer" mapstructure:"WsMessageNameEventToServer"`

	// WsMessageNameRequestToServer corresponds to the JSON schema field
	// "WsMessageNameRequestToServer".
	WsMessageNameRequestToServer WsMessageNameRequestToServer `json:"WsMessageNameRequestToServer" yaml:"WsMessageNameRequestToServer" mapstructure:"WsMessageNameRequestToServer"`

	// WsMessageType corresponds to the JSON schema field "WsMessageType".
	WsMessageType WsMessageType `json:"WsMessageType" yaml:"WsMessageType" mapstructure:"WsMessageType"`

	// Model corresponds to the JSON schema field "model".
	Model Models `json:"model" yaml:"model" mapstructure:"model"`
}

type MainLensModel interface{}

type MainWsMessage struct {
	// RequestToServer corresponds to the JSON schema field "RequestToServer".
	RequestToServer MainWsMessageRequestToServer `json:"RequestToServer" yaml:"RequestToServer" mapstructure:"RequestToServer"`
}

type MainWsMessageRequestToServer struct {
	// Action corresponds to the JSON schema field "Action".
	Action MainWsMessageRequestToServerAction `json:"Action" yaml:"Action" mapstructure:"Action"`

	// LensQuery corresponds to the JSON schema field "LensQuery".
	LensQuery MainWsMessageRequestToServerLensQuery `json:"LensQuery" yaml:"LensQuery" mapstructure:"LensQuery"`
}

type MainWsMessageRequestToServerAction struct {
	// ActionBase corresponds to the JSON schema field "ActionBase".
	ActionBase ActionBase `json:"ActionBase" yaml:"ActionBase" mapstructure:"ActionBase"`

	// ActionName corresponds to the JSON schema field "ActionName".
	ActionName ActionName `json:"ActionName" yaml:"ActionName" mapstructure:"ActionName"`

	// SignUpByEmail corresponds to the JSON schema field "SignUpByEmail".
	SignUpByEmail ActionSignUpByEmail `json:"SignUpByEmail" yaml:"SignUpByEmail" mapstructure:"SignUpByEmail"`

	// SignUpByEmailCode corresponds to the JSON schema field "SignUpByEmailCode".
	SignUpByEmailCode ActionSignUpByEmailCode `json:"SignUpByEmailCode" yaml:"SignUpByEmailCode" mapstructure:"SignUpByEmailCode"`

	// SignUpByEmailCodeResponse corresponds to the JSON schema field
	// "SignUpByEmailCodeResponse".
	SignUpByEmailCodeResponse ActionSignUpByEmailCodeResponse `json:"SignUpByEmailCodeResponse" yaml:"SignUpByEmailCodeResponse" mapstructure:"SignUpByEmailCodeResponse"`

	// SignUpByEmailResponse corresponds to the JSON schema field
	// "SignUpByEmailResponse".
	SignUpByEmailResponse ActionSignUpByEmailResponse `json:"SignUpByEmailResponse" yaml:"SignUpByEmailResponse" mapstructure:"SignUpByEmailResponse"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MainWsMessageRequestToServerAction) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["ActionBase"]; raw != nil && !ok {
		return fmt.Errorf("field ActionBase in MainWsMessageRequestToServerAction: required")
	}
	if _, ok := raw["ActionName"]; raw != nil && !ok {
		return fmt.Errorf("field ActionName in MainWsMessageRequestToServerAction: required")
	}
	if _, ok := raw["SignUpByEmail"]; raw != nil && !ok {
		return fmt.Errorf("field SignUpByEmail in MainWsMessageRequestToServerAction: required")
	}
	if _, ok := raw["SignUpByEmailCode"]; raw != nil && !ok {
		return fmt.Errorf("field SignUpByEmailCode in MainWsMessageRequestToServerAction: required")
	}
	if _, ok := raw["SignUpByEmailCodeResponse"]; raw != nil && !ok {
		return fmt.Errorf("field SignUpByEmailCodeResponse in MainWsMessageRequestToServerAction: required")
	}
	if _, ok := raw["SignUpByEmailResponse"]; raw != nil && !ok {
		return fmt.Errorf("field SignUpByEmailResponse in MainWsMessageRequestToServerAction: required")
	}
	type Plain MainWsMessageRequestToServerAction
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MainWsMessageRequestToServerAction(plain)
	return nil
}

type MainWsMessageRequestToServerLensQuery struct {
	// LensQueryBase corresponds to the JSON schema field "LensQueryBase".
	LensQueryBase LensQueryBase `json:"LensQueryBase" yaml:"LensQueryBase" mapstructure:"LensQueryBase"`

	// LensQueryName corresponds to the JSON schema field "LensQueryName".
	LensQueryName LensQueryName `json:"LensQueryName" yaml:"LensQueryName" mapstructure:"LensQueryName"`

	// LensQueryUser corresponds to the JSON schema field "LensQueryUser".
	LensQueryUser LensQueryUser `json:"LensQueryUser" yaml:"LensQueryUser" mapstructure:"LensQueryUser"`

	// LensQueryUserResponse corresponds to the JSON schema field
	// "LensQueryUserResponse".
	LensQueryUserResponse LensQueryUserResponse `json:"LensQueryUserResponse" yaml:"LensQueryUserResponse" mapstructure:"LensQueryUserResponse"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MainWsMessageRequestToServerLensQuery) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["LensQueryBase"]; raw != nil && !ok {
		return fmt.Errorf("field LensQueryBase in MainWsMessageRequestToServerLensQuery: required")
	}
	if _, ok := raw["LensQueryName"]; raw != nil && !ok {
		return fmt.Errorf("field LensQueryName in MainWsMessageRequestToServerLensQuery: required")
	}
	if _, ok := raw["LensQueryUser"]; raw != nil && !ok {
		return fmt.Errorf("field LensQueryUser in MainWsMessageRequestToServerLensQuery: required")
	}
	if _, ok := raw["LensQueryUserResponse"]; raw != nil && !ok {
		return fmt.Errorf("field LensQueryUserResponse in MainWsMessageRequestToServerLensQuery: required")
	}
	type Plain MainWsMessageRequestToServerLensQuery
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MainWsMessageRequestToServerLensQuery(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MainWsMessageRequestToServer) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["Action"]; raw != nil && !ok {
		return fmt.Errorf("field Action in MainWsMessageRequestToServer: required")
	}
	if _, ok := raw["LensQuery"]; raw != nil && !ok {
		return fmt.Errorf("field LensQuery in MainWsMessageRequestToServer: required")
	}
	type Plain MainWsMessageRequestToServer
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MainWsMessageRequestToServer(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MainWsMessage) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["RequestToServer"]; raw != nil && !ok {
		return fmt.Errorf("field RequestToServer in MainWsMessage: required")
	}
	type Plain MainWsMessage
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MainWsMessage(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Main) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["LensModel"]; raw != nil && !ok {
		return fmt.Errorf("field LensModel in Main: required")
	}
	if _, ok := raw["WsMessage"]; raw != nil && !ok {
		return fmt.Errorf("field WsMessage in Main: required")
	}
	if _, ok := raw["WsMessageBase"]; raw != nil && !ok {
		return fmt.Errorf("field WsMessageBase in Main: required")
	}
	if _, ok := raw["WsMessageName"]; raw != nil && !ok {
		return fmt.Errorf("field WsMessageName in Main: required")
	}
	if _, ok := raw["WsMessageNameEventToServer"]; raw != nil && !ok {
		return fmt.Errorf("field WsMessageNameEventToServer in Main: required")
	}
	if _, ok := raw["WsMessageNameRequestToServer"]; raw != nil && !ok {
		return fmt.Errorf("field WsMessageNameRequestToServer in Main: required")
	}
	if _, ok := raw["WsMessageType"]; raw != nil && !ok {
		return fmt.Errorf("field WsMessageType in Main: required")
	}
	if _, ok := raw["model"]; raw != nil && !ok {
		return fmt.Errorf("field model in Main: required")
	}
	type Plain Main
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Main(plain)
	return nil
}

type MessageMap struct {
	// AddCard corresponds to the JSON schema field "AddCard".
	AddCard MessageAddCard `json:"AddCard" yaml:"AddCard" mapstructure:"AddCard"`

	// DefineTerm corresponds to the JSON schema field "DefineTerm".
	DefineTerm MessageDefineTerm `json:"DefineTerm" yaml:"DefineTerm" mapstructure:"DefineTerm"`

	// GetAuthInfo corresponds to the JSON schema field "GetAuthInfo".
	GetAuthInfo MessageGetAuthInfo `json:"GetAuthInfo" yaml:"GetAuthInfo" mapstructure:"GetAuthInfo"`

	// GetCards corresponds to the JSON schema field "GetCards".
	GetCards MessageGetCards `json:"GetCards" yaml:"GetCards" mapstructure:"GetCards"`

	// GetDecks corresponds to the JSON schema field "GetDecks".
	GetDecks MessageGetDecks `json:"GetDecks" yaml:"GetDecks" mapstructure:"GetDecks"`

	// ParseTextFromForeign corresponds to the JSON schema field
	// "ParseTextFromForeign".
	ParseTextFromForeign MessageParseTextFromForeign `json:"ParseTextFromForeign" yaml:"ParseTextFromForeign" mapstructure:"ParseTextFromForeign"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageMap) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["AddCard"]; raw != nil && !ok {
		return fmt.Errorf("field AddCard in MessageMap: required")
	}
	if _, ok := raw["DefineTerm"]; raw != nil && !ok {
		return fmt.Errorf("field DefineTerm in MessageMap: required")
	}
	if _, ok := raw["GetAuthInfo"]; raw != nil && !ok {
		return fmt.Errorf("field GetAuthInfo in MessageMap: required")
	}
	if _, ok := raw["GetCards"]; raw != nil && !ok {
		return fmt.Errorf("field GetCards in MessageMap: required")
	}
	if _, ok := raw["GetDecks"]; raw != nil && !ok {
		return fmt.Errorf("field GetDecks in MessageMap: required")
	}
	if _, ok := raw["ParseTextFromForeign"]; raw != nil && !ok {
		return fmt.Errorf("field ParseTextFromForeign in MessageMap: required")
	}
	type Plain MessageMap
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageMap(plain)
	return nil
}

type Models struct {
	// AuthInfo corresponds to the JSON schema field "AuthInfo".
	AuthInfo AuthInfo `json:"AuthInfo" yaml:"AuthInfo" mapstructure:"AuthInfo"`

	// AuthSession corresponds to the JSON schema field "AuthSession".
	AuthSession AuthSession `json:"AuthSession" yaml:"AuthSession" mapstructure:"AuthSession"`

	// Card corresponds to the JSON schema field "Card".
	Card Card `json:"Card" yaml:"Card" mapstructure:"Card"`

	// MessageBase corresponds to the JSON schema field "MessageBase".
	MessageBase MessageBase `json:"MessageBase" yaml:"MessageBase" mapstructure:"MessageBase"`

	// Messages corresponds to the JSON schema field "messages".
	Messages MessageMap `json:"messages" yaml:"messages" mapstructure:"messages"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Models) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["AuthInfo"]; raw != nil && !ok {
		return fmt.Errorf("field AuthInfo in Models: required")
	}
	if _, ok := raw["AuthSession"]; raw != nil && !ok {
		return fmt.Errorf("field AuthSession in Models: required")
	}
	if _, ok := raw["Card"]; raw != nil && !ok {
		return fmt.Errorf("field Card in Models: required")
	}
	if _, ok := raw["MessageBase"]; raw != nil && !ok {
		return fmt.Errorf("field MessageBase in Models: required")
	}
	if _, ok := raw["messages"]; raw != nil && !ok {
		return fmt.Errorf("field messages in Models: required")
	}
	type Plain Models
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Models(plain)
	return nil
}

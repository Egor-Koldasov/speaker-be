// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type ChatInputParseTextFromForeign struct {
	// OriginalLanguages corresponds to the JSON schema field "originalLanguages".
	OriginalLanguages ForeignLanguages `json:"originalLanguages" yaml:"originalLanguages" mapstructure:"originalLanguages"`

	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text" mapstructure:"text"`

	// TranslationLanguage corresponds to the JSON schema field "translationLanguage".
	TranslationLanguage TranslationLanguage `json:"translationLanguage" yaml:"translationLanguage" mapstructure:"translationLanguage"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatInputParseTextFromForeign) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["originalLanguages"]; !ok || v == nil {
		return fmt.Errorf("field originalLanguages in ChatInputParseTextFromForeign: required")
	}
	if v, ok := raw["text"]; !ok || v == nil {
		return fmt.Errorf("field text in ChatInputParseTextFromForeign: required")
	}
	if v, ok := raw["translationLanguage"]; !ok || v == nil {
		return fmt.Errorf("field translationLanguage in ChatInputParseTextFromForeign: required")
	}
	type Plain ChatInputParseTextFromForeign
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatInputParseTextFromForeign(plain)
	return nil
}

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"
import "reflect"

type MessageDefineTerm struct {
	// Input corresponds to the JSON schema field "input".
	Input MessageDefineTermInput `json:"input" yaml:"input" mapstructure:"input"`

	// Output corresponds to the JSON schema field "output".
	Output MessageDefineTermOutput `json:"output" yaml:"output" mapstructure:"output"`
}

type MessageDefineTermInput struct {
	// Data corresponds to the JSON schema field "data".
	Data MessageDefineTermInputData `json:"data" yaml:"data" mapstructure:"data"`

	// Id corresponds to the JSON schema field "id".
	Id Id `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name MessageDefineTermInputName `json:"name" yaml:"name" mapstructure:"name"`
}

type MessageDefineTermInputData struct {
	// A context from which the term is taken
	Context string `json:"context" yaml:"context" mapstructure:"context"`

	// OriginalLanguages corresponds to the JSON schema field "originalLanguages".
	OriginalLanguages ForeignLanguages `json:"originalLanguages" yaml:"originalLanguages" mapstructure:"originalLanguages"`

	// A term to define
	Term string `json:"term" yaml:"term" mapstructure:"term"`

	// TranslationLanguage corresponds to the JSON schema field "translationLanguage".
	TranslationLanguage TranslationLanguage `json:"translationLanguage" yaml:"translationLanguage" mapstructure:"translationLanguage"`
}

type MessageDefineTermInputName string

const MessageDefineTermInputNameDefineTerm MessageDefineTermInputName = "DefineTerm"

type MessageDefineTermOutput struct {
	// Data corresponds to the JSON schema field "data".
	Data MessageDefineTermOutputData `json:"data" yaml:"data" mapstructure:"data"`

	// Errors corresponds to the JSON schema field "errors".
	Errors []AppError `json:"errors" yaml:"errors" mapstructure:"errors"`

	// Id corresponds to the JSON schema field "id".
	Id Id `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name MessageDefineTermOutputName `json:"name" yaml:"name" mapstructure:"name"`
}

type MessageDefineTermOutputData struct {
	// Definition corresponds to the JSON schema field "definition".
	Definition Definition `json:"definition" yaml:"definition" mapstructure:"definition"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageDefineTermInput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in MessageDefineTermInput: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in MessageDefineTermInput: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in MessageDefineTermInput: required")
	}
	type Plain MessageDefineTermInput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageDefineTermInput(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageDefineTermInputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageDefineTermInputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageDefineTermInputName, v)
	}
	*j = MessageDefineTermInputName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageDefineTermOutputData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["definition"]; !ok || v == nil {
		return fmt.Errorf("field definition in MessageDefineTermOutputData: required")
	}
	type Plain MessageDefineTermOutputData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageDefineTermOutputData(plain)
	return nil
}

type MessageDefineTermOutputName string

var enumValues_MessageDefineTermOutputName = []interface{}{
	"DefineTerm",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageDefineTermOutputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageDefineTermOutputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageDefineTermOutputName, v)
	}
	*j = MessageDefineTermOutputName(v)
	return nil
}

const MessageDefineTermOutputNameDefineTerm MessageDefineTermOutputName = "DefineTerm"

var enumValues_MessageDefineTermInputName = []interface{}{
	"DefineTerm",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageDefineTermOutput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in MessageDefineTermOutput: required")
	}
	if v, ok := raw["errors"]; !ok || v == nil {
		return fmt.Errorf("field errors in MessageDefineTermOutput: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in MessageDefineTermOutput: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in MessageDefineTermOutput: required")
	}
	type Plain MessageDefineTermOutput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageDefineTermOutput(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageDefineTermInputData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["context"]; !ok || v == nil {
		return fmt.Errorf("field context in MessageDefineTermInputData: required")
	}
	if v, ok := raw["originalLanguages"]; !ok || v == nil {
		return fmt.Errorf("field originalLanguages in MessageDefineTermInputData: required")
	}
	if v, ok := raw["term"]; !ok || v == nil {
		return fmt.Errorf("field term in MessageDefineTermInputData: required")
	}
	if v, ok := raw["translationLanguage"]; !ok || v == nil {
		return fmt.Errorf("field translationLanguage in MessageDefineTermInputData: required")
	}
	type Plain MessageDefineTermInputData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageDefineTermInputData(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageDefineTerm) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["input"]; !ok || v == nil {
		return fmt.Errorf("field input in MessageDefineTerm: required")
	}
	if v, ok := raw["output"]; !ok || v == nil {
		return fmt.Errorf("field output in MessageDefineTerm: required")
	}
	type Plain MessageDefineTerm
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageDefineTerm(plain)
	return nil
}

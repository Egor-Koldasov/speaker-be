// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"
import "reflect"

type MessageParseTextFromForeign struct {
	// Input corresponds to the JSON schema field "input".
	Input MessageParseTextFromForeignInput `json:"input" yaml:"input" mapstructure:"input"`

	// Output corresponds to the JSON schema field "output".
	Output MessageParseTextFromForeignOutput `json:"output" yaml:"output" mapstructure:"output"`
}

type MessageParseTextFromForeignInput struct {
	// AuthToken corresponds to the JSON schema field "authToken".
	AuthToken string `json:"authToken" yaml:"authToken" mapstructure:"authToken"`

	// Data corresponds to the JSON schema field "data".
	Data MessageParseTextFromForeignInputData `json:"data" yaml:"data" mapstructure:"data"`

	// Id corresponds to the JSON schema field "id".
	Id Id `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name MessageParseTextFromForeignInputName `json:"name" yaml:"name" mapstructure:"name"`
}

type MessageParseTextFromForeignInputData struct {
	// ChatInput corresponds to the JSON schema field "chatInput".
	ChatInput ChatInputParseTextFromForeign `json:"chatInput" yaml:"chatInput" mapstructure:"chatInput"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignInputData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["chatInput"]; raw != nil && !ok {
		return fmt.Errorf("field chatInput in MessageParseTextFromForeignInputData: required")
	}
	type Plain MessageParseTextFromForeignInputData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeignInputData(plain)
	return nil
}

type MessageParseTextFromForeignInputName string

const MessageParseTextFromForeignInputNameParseTextFromForeign MessageParseTextFromForeignInputName = "ParseTextFromForeign"

var enumValues_MessageParseTextFromForeignInputName = []interface{}{
	"ParseTextFromForeign",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignInputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageParseTextFromForeignInputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageParseTextFromForeignInputName, v)
	}
	*j = MessageParseTextFromForeignInputName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignInput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["authToken"]; raw != nil && !ok {
		return fmt.Errorf("field authToken in MessageParseTextFromForeignInput: required")
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in MessageParseTextFromForeignInput: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in MessageParseTextFromForeignInput: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in MessageParseTextFromForeignInput: required")
	}
	type Plain MessageParseTextFromForeignInput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeignInput(plain)
	return nil
}

type MessageParseTextFromForeignOutput struct {
	// Data corresponds to the JSON schema field "data".
	Data *MessageParseTextFromForeignOutputData `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Errors corresponds to the JSON schema field "errors".
	Errors []AppError `json:"errors" yaml:"errors" mapstructure:"errors"`

	// Id corresponds to the JSON schema field "id".
	Id Id `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name MessageParseTextFromForeignOutputName `json:"name" yaml:"name" mapstructure:"name"`
}

type MessageParseTextFromForeignOutputData struct {
	// ChatOutput corresponds to the JSON schema field "chatOutput".
	ChatOutput ChatOutputDataParseTextFromForeign `json:"chatOutput" yaml:"chatOutput" mapstructure:"chatOutput"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignOutputData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["chatOutput"]; raw != nil && !ok {
		return fmt.Errorf("field chatOutput in MessageParseTextFromForeignOutputData: required")
	}
	type Plain MessageParseTextFromForeignOutputData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeignOutputData(plain)
	return nil
}

type MessageParseTextFromForeignOutputName string

const MessageParseTextFromForeignOutputNameParseTextFromForeign MessageParseTextFromForeignOutputName = "ParseTextFromForeign"

var enumValues_MessageParseTextFromForeignOutputName = []interface{}{
	"ParseTextFromForeign",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignOutputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageParseTextFromForeignOutputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageParseTextFromForeignOutputName, v)
	}
	*j = MessageParseTextFromForeignOutputName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignOutput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["errors"]; raw != nil && !ok {
		return fmt.Errorf("field errors in MessageParseTextFromForeignOutput: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in MessageParseTextFromForeignOutput: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in MessageParseTextFromForeignOutput: required")
	}
	type Plain MessageParseTextFromForeignOutput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeignOutput(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeign) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["input"]; raw != nil && !ok {
		return fmt.Errorf("field input in MessageParseTextFromForeign: required")
	}
	if _, ok := raw["output"]; raw != nil && !ok {
		return fmt.Errorf("field output in MessageParseTextFromForeign: required")
	}
	type Plain MessageParseTextFromForeign
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeign(plain)
	return nil
}

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type FieldConfig struct {
	// ISO 8601 date string
	CreatedAt string `json:"createdAt" yaml:"createdAt" mapstructure:"createdAt"`

	// ISO 8601 date string or null
	DeletedAt *string `json:"deletedAt" yaml:"deletedAt" mapstructure:"deletedAt"`

	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id" yaml:"id" mapstructure:"id"`

	// The maximum number of results for AI to generate. AI should never generate more
	// than this number of results.
	MaxResult float64 `json:"maxResult" yaml:"maxResult" mapstructure:"maxResult"`

	// The minimum number of results for AI to generate. If the AI cannot generate
	// enough results it can return less, but otherwise should match
	MinResult float64 `json:"minResult" yaml:"minResult" mapstructure:"minResult"`

	// The name of the field defined by user and displayed back to user
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Prompt corresponds to the JSON schema field "prompt".
	Prompt string `json:"prompt" yaml:"prompt" mapstructure:"prompt"`

	// ISO 8601 date string
	UpdatedAt string `json:"updatedAt" yaml:"updatedAt" mapstructure:"updatedAt"`

	// ValueType corresponds to the JSON schema field "valueType".
	ValueType FieldConfigValueType `json:"valueType" yaml:"valueType" mapstructure:"valueType"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FieldConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["createdAt"]; raw != nil && !ok {
		return fmt.Errorf("field createdAt in FieldConfig: required")
	}
	if _, ok := raw["deletedAt"]; raw != nil && !ok {
		return fmt.Errorf("field deletedAt in FieldConfig: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in FieldConfig: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in FieldConfig: required")
	}
	if _, ok := raw["prompt"]; raw != nil && !ok {
		return fmt.Errorf("field prompt in FieldConfig: required")
	}
	if _, ok := raw["updatedAt"]; raw != nil && !ok {
		return fmt.Errorf("field updatedAt in FieldConfig: required")
	}
	if _, ok := raw["valueType"]; raw != nil && !ok {
		return fmt.Errorf("field valueType in FieldConfig: required")
	}
	type Plain FieldConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["maxResult"]; !ok || v == nil {
		plain.MaxResult = 1.0
	}
	if v, ok := raw["minResult"]; !ok || v == nil {
		plain.MinResult = 1.0
	}
	*j = FieldConfig(plain)
	return nil
}

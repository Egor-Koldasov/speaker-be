// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type LensCardValue struct {
	// CardConfigId corresponds to the JSON schema field "cardConfigId".
	CardConfigId DbId `json:"cardConfigId" yaml:"cardConfigId" mapstructure:"cardConfigId"`

	// Fields corresponds to the JSON schema field "fields".
	Fields []interface{} `json:"fields" yaml:"fields" mapstructure:"fields"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LensCardValue) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["cardConfigId"]; raw != nil && !ok {
		return fmt.Errorf("field cardConfigId in LensCardValue: required")
	}
	if _, ok := raw["fields"]; raw != nil && !ok {
		return fmt.Errorf("field fields in LensCardValue: required")
	}
	type Plain LensCardValue
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LensCardValue(plain)
	return nil
}

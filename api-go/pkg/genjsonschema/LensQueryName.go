// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"
import "reflect"

type LensQueryName string

const LensQueryNameLensUser LensQueryName = "LensUser"

var enumValues_LensQueryName = []interface{}{
	"LensUser",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LensQueryName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LensQueryName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LensQueryName, v)
	}
	*j = LensQueryName(v)
	return nil
}

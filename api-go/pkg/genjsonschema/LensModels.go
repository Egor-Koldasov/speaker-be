// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type LensModels struct {
	// LensCardConfig corresponds to the JSON schema field "LensCardConfig".
	LensCardConfig LensCardConfig `json:"LensCardConfig" yaml:"LensCardConfig" mapstructure:"LensCardConfig"`

	// LensCardValue corresponds to the JSON schema field "LensCardValue".
	LensCardValue LensCardValue `json:"LensCardValue" yaml:"LensCardValue" mapstructure:"LensCardValue"`

	// LensFieldConfig corresponds to the JSON schema field "LensFieldConfig".
	LensFieldConfig LensFieldConfig `json:"LensFieldConfig" yaml:"LensFieldConfig" mapstructure:"LensFieldConfig"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LensModels) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["LensCardConfig"]; raw != nil && !ok {
		return fmt.Errorf("field LensCardConfig in LensModels: required")
	}
	if _, ok := raw["LensCardValue"]; raw != nil && !ok {
		return fmt.Errorf("field LensCardValue in LensModels: required")
	}
	if _, ok := raw["LensFieldConfig"]; raw != nil && !ok {
		return fmt.Errorf("field LensFieldConfig in LensModels: required")
	}
	type Plain LensModels
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LensModels(plain)
	return nil
}

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type ActionSignUpByEmailCode struct {
	// Data corresponds to the JSON schema field "data".
	Data ActionSignUpByEmailCodeData `json:"data" yaml:"data" mapstructure:"data"`

	// Errors corresponds to the JSON schema field "errors".
	Errors []AppError `json:"errors" yaml:"errors" mapstructure:"errors"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name interface{} `json:"name" yaml:"name" mapstructure:"name"`
}

type ActionSignUpByEmailCodeData struct {
	// ActionName corresponds to the JSON schema field "actionName".
	ActionName interface{} `json:"actionName" yaml:"actionName" mapstructure:"actionName"`

	// ActionParams corresponds to the JSON schema field "actionParams".
	ActionParams ActionSignUpByEmailCodeDataActionParams `json:"actionParams" yaml:"actionParams" mapstructure:"actionParams"`
}

type ActionSignUpByEmailCodeDataActionParams struct {
	// Code corresponds to the JSON schema field "code".
	Code string `json:"code" yaml:"code" mapstructure:"code"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionSignUpByEmailCodeDataActionParams) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["code"]; raw != nil && !ok {
		return fmt.Errorf("field code in ActionSignUpByEmailCodeDataActionParams: required")
	}
	type Plain ActionSignUpByEmailCodeDataActionParams
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActionSignUpByEmailCodeDataActionParams(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionSignUpByEmailCodeData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["actionName"]; raw != nil && !ok {
		return fmt.Errorf("field actionName in ActionSignUpByEmailCodeData: required")
	}
	if _, ok := raw["actionParams"]; raw != nil && !ok {
		return fmt.Errorf("field actionParams in ActionSignUpByEmailCodeData: required")
	}
	type Plain ActionSignUpByEmailCodeData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActionSignUpByEmailCodeData(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionSignUpByEmailCode) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in ActionSignUpByEmailCode: required")
	}
	if _, ok := raw["errors"]; raw != nil && !ok {
		return fmt.Errorf("field errors in ActionSignUpByEmailCode: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in ActionSignUpByEmailCode: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in ActionSignUpByEmailCode: required")
	}
	type Plain ActionSignUpByEmailCode
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActionSignUpByEmailCode(plain)
	return nil
}

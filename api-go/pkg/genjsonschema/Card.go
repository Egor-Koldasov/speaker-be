// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type Card struct {
	// Definition corresponds to the JSON schema field "definition".
	Definition Definition `json:"definition" yaml:"definition" mapstructure:"definition"`

	// FieldAnswers corresponds to the JSON schema field "fieldAnswers".
	FieldAnswers []UserCardFieldAnswer `json:"fieldAnswers" yaml:"fieldAnswers" mapstructure:"fieldAnswers"`

	// uuid-v7
	Id string `json:"id" yaml:"id" mapstructure:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Card) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["definition"]; raw != nil && !ok {
		return fmt.Errorf("field definition in Card: required")
	}
	if _, ok := raw["fieldAnswers"]; raw != nil && !ok {
		return fmt.Errorf("field fieldAnswers in Card: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in Card: required")
	}
	type Plain Card
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Card(plain)
	return nil
}

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type ChatInputDefineTerm struct {
	// A context from which the term is taken
	Context string `json:"context" yaml:"context" mapstructure:"context"`

	// OriginalLanguages corresponds to the JSON schema field "originalLanguages".
	OriginalLanguages ForeignLanguages `json:"originalLanguages" yaml:"originalLanguages" mapstructure:"originalLanguages"`

	// A term to define
	Term string `json:"term" yaml:"term" mapstructure:"term"`

	// TranslationLanguage corresponds to the JSON schema field "translationLanguage".
	TranslationLanguage TranslationLanguage `json:"translationLanguage" yaml:"translationLanguage" mapstructure:"translationLanguage"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatInputDefineTerm) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["context"]; !ok || v == nil {
		return fmt.Errorf("field context in ChatInputDefineTerm: required")
	}
	if v, ok := raw["originalLanguages"]; !ok || v == nil {
		return fmt.Errorf("field originalLanguages in ChatInputDefineTerm: required")
	}
	if v, ok := raw["term"]; !ok || v == nil {
		return fmt.Errorf("field term in ChatInputDefineTerm: required")
	}
	if v, ok := raw["translationLanguage"]; !ok || v == nil {
		return fmt.Errorf("field translationLanguage in ChatInputDefineTerm: required")
	}
	type Plain ChatInputDefineTerm
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatInputDefineTerm(plain)
	return nil
}

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type WsMessageBase struct {
	// Data corresponds to the JSON schema field "data".
	Data WsMessageBaseData `json:"data" yaml:"data" mapstructure:"data"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name WsMessageName `json:"name" yaml:"name" mapstructure:"name"`

	// ResponseForId corresponds to the JSON schema field "responseForId".
	ResponseForId *string `json:"responseForId,omitempty" yaml:"responseForId,omitempty" mapstructure:"responseForId,omitempty"`
}

type WsMessageBaseData map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WsMessageBase) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in WsMessageBase: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in WsMessageBase: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in WsMessageBase: required")
	}
	type Plain WsMessageBase
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WsMessageBase(plain)
	return nil
}

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"
import "reflect"

type MessageGetCards struct {
	// Input corresponds to the JSON schema field "input".
	Input MessageGetCardsInput `json:"input" yaml:"input" mapstructure:"input"`

	// Output corresponds to the JSON schema field "output".
	Output MessageGetCardsOutput `json:"output" yaml:"output" mapstructure:"output"`
}

type MessageGetCardsInput struct {
	// AuthToken corresponds to the JSON schema field "authToken".
	AuthToken string `json:"authToken" yaml:"authToken" mapstructure:"authToken"`

	// Data corresponds to the JSON schema field "data".
	Data MessageGetCardsInputData `json:"data" yaml:"data" mapstructure:"data"`

	// Id corresponds to the JSON schema field "id".
	Id Id `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name MessageGetCardsInputName `json:"name" yaml:"name" mapstructure:"name"`
}

type MessageGetCardsInputData struct {
	// DeckId corresponds to the JSON schema field "deckId".
	DeckId string `json:"deckId" yaml:"deckId" mapstructure:"deckId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetCardsInputData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["deckId"]; raw != nil && !ok {
		return fmt.Errorf("field deckId in MessageGetCardsInputData: required")
	}
	type Plain MessageGetCardsInputData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageGetCardsInputData(plain)
	return nil
}

type MessageGetCardsInputName string

const MessageGetCardsInputNameGetCards MessageGetCardsInputName = "GetCards"

var enumValues_MessageGetCardsInputName = []interface{}{
	"GetCards",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetCardsInputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageGetCardsInputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageGetCardsInputName, v)
	}
	*j = MessageGetCardsInputName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetCardsInput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["authToken"]; raw != nil && !ok {
		return fmt.Errorf("field authToken in MessageGetCardsInput: required")
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in MessageGetCardsInput: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in MessageGetCardsInput: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in MessageGetCardsInput: required")
	}
	type Plain MessageGetCardsInput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageGetCardsInput(plain)
	return nil
}

type MessageGetCardsOutput struct {
	// Data corresponds to the JSON schema field "data".
	Data *MessageGetCardsOutputData `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Errors corresponds to the JSON schema field "errors".
	Errors []AppError `json:"errors" yaml:"errors" mapstructure:"errors"`

	// Id corresponds to the JSON schema field "id".
	Id Id `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name MessageGetCardsOutputName `json:"name" yaml:"name" mapstructure:"name"`
}

type MessageGetCardsOutputData struct {
	// Cards corresponds to the JSON schema field "cards".
	Cards []Card `json:"cards" yaml:"cards" mapstructure:"cards"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetCardsOutputData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["cards"]; raw != nil && !ok {
		return fmt.Errorf("field cards in MessageGetCardsOutputData: required")
	}
	type Plain MessageGetCardsOutputData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageGetCardsOutputData(plain)
	return nil
}

type MessageGetCardsOutputName string

const MessageGetCardsOutputNameGetCards MessageGetCardsOutputName = "GetCards"

var enumValues_MessageGetCardsOutputName = []interface{}{
	"GetCards",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetCardsOutputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageGetCardsOutputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageGetCardsOutputName, v)
	}
	*j = MessageGetCardsOutputName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetCardsOutput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["errors"]; raw != nil && !ok {
		return fmt.Errorf("field errors in MessageGetCardsOutput: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in MessageGetCardsOutput: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in MessageGetCardsOutput: required")
	}
	type Plain MessageGetCardsOutput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageGetCardsOutput(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageGetCards) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["input"]; raw != nil && !ok {
		return fmt.Errorf("field input in MessageGetCards: required")
	}
	if _, ok := raw["output"]; raw != nil && !ok {
		return fmt.Errorf("field output in MessageGetCards: required")
	}
	type Plain MessageGetCards
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageGetCards(plain)
	return nil
}

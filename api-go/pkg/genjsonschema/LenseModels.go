// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type LenseModels struct {
	// User corresponds to the JSON schema field "User".
	User User `json:"User" yaml:"User" mapstructure:"User"`

	// UserSettings corresponds to the JSON schema field "UserSettings".
	UserSettings UserSettings `json:"UserSettings" yaml:"UserSettings" mapstructure:"UserSettings"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LenseModels) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["User"]; raw != nil && !ok {
		return fmt.Errorf("field User in LenseModels: required")
	}
	if _, ok := raw["UserSettings"]; raw != nil && !ok {
		return fmt.Errorf("field UserSettings in LenseModels: required")
	}
	type Plain LenseModels
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LenseModels(plain)
	return nil
}

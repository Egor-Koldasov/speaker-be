// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type ChatOutputDataParseTextFromForeignDefinitionPartsElem struct {
	// The BCP 47 language tag of the language of that word. Null for unknown
	LanguageOriginal string `json:"languageOriginal" yaml:"languageOriginal" mapstructure:"languageOriginal"`

	// The BCP 47 language tag of the language of the translation. It should match the
	// requested 'translationLanguage'
	LanguageTranslated string `json:"languageTranslated" yaml:"languageTranslated" mapstructure:"languageTranslated"`

	// The text of word extracted. Keep this part small, it should not be longer than
	// a typical dictionary entry point. Include only the word itself without any
	// extra symbols. Do not include any punctuation symbols, enclosing parentheses or
	// apostrophes an so on.
	Text string `json:"text" yaml:"text" mapstructure:"text"`

	// A short translation of the word without additional formatting. Among several
	// translation choices, choose the one that is the best fitting the original
	// context from the user input text that was sent for this parsing.
	Translation string `json:"translation" yaml:"translation" mapstructure:"translation"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatOutputDataParseTextFromForeignDefinitionPartsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["languageOriginal"]; !ok || v == nil {
		return fmt.Errorf("field languageOriginal in ChatOutputDataParseTextFromForeignDefinitionPartsElem: required")
	}
	if v, ok := raw["languageTranslated"]; !ok || v == nil {
		return fmt.Errorf("field languageTranslated in ChatOutputDataParseTextFromForeignDefinitionPartsElem: required")
	}
	if v, ok := raw["text"]; !ok || v == nil {
		return fmt.Errorf("field text in ChatOutputDataParseTextFromForeignDefinitionPartsElem: required")
	}
	if v, ok := raw["translation"]; !ok || v == nil {
		return fmt.Errorf("field translation in ChatOutputDataParseTextFromForeignDefinitionPartsElem: required")
	}
	type Plain ChatOutputDataParseTextFromForeignDefinitionPartsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatOutputDataParseTextFromForeignDefinitionPartsElem(plain)
	return nil
}

// The full translation of the text to the requested language.
type ChatOutputDataParseTextFromForeignTranslation struct {
	// The BCP 47 language tag of the language of the translation. It should match the
	// requested 'translationLanguage'
	Language string `json:"language" yaml:"language" mapstructure:"language"`

	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text" mapstructure:"text"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatOutputDataParseTextFromForeignTranslation) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["language"]; !ok || v == nil {
		return fmt.Errorf("field language in ChatOutputDataParseTextFromForeignTranslation: required")
	}
	if v, ok := raw["text"]; !ok || v == nil {
		return fmt.Errorf("field text in ChatOutputDataParseTextFromForeignTranslation: required")
	}
	type Plain ChatOutputDataParseTextFromForeignTranslation
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatOutputDataParseTextFromForeignTranslation(plain)
	return nil
}

type ChatOutputDataParseTextFromForeign struct {
	// DefinitionParts corresponds to the JSON schema field "definitionParts".
	DefinitionParts []ChatOutputDataParseTextFromForeignDefinitionPartsElem `json:"definitionParts" yaml:"definitionParts" mapstructure:"definitionParts"`

	// The full translation of the text to the requested language.
	Translation ChatOutputDataParseTextFromForeignTranslation `json:"translation" yaml:"translation" mapstructure:"translation"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChatOutputDataParseTextFromForeign) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["definitionParts"]; !ok || v == nil {
		return fmt.Errorf("field definitionParts in ChatOutputDataParseTextFromForeign: required")
	}
	if v, ok := raw["translation"]; !ok || v == nil {
		return fmt.Errorf("field translation in ChatOutputDataParseTextFromForeign: required")
	}
	type Plain ChatOutputDataParseTextFromForeign
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChatOutputDataParseTextFromForeign(plain)
	return nil
}

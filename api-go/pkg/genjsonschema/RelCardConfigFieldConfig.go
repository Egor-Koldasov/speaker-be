// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

// Many to many relation between CardConfig and FieldConfig
type RelCardConfigFieldConfig struct {
	// CardConfigId corresponds to the JSON schema field "cardConfigId".
	CardConfigId DbId `json:"cardConfigId" yaml:"cardConfigId" mapstructure:"cardConfigId"`

	// FieldConfigId corresponds to the JSON schema field "fieldConfigId".
	FieldConfigId DbId `json:"fieldConfigId" yaml:"fieldConfigId" mapstructure:"fieldConfigId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RelCardConfigFieldConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["cardConfigId"]; raw != nil && !ok {
		return fmt.Errorf("field cardConfigId in RelCardConfigFieldConfig: required")
	}
	if _, ok := raw["fieldConfigId"]; raw != nil && !ok {
		return fmt.Errorf("field fieldConfigId in RelCardConfigFieldConfig: required")
	}
	type Plain RelCardConfigFieldConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RelCardConfigFieldConfig(plain)
	return nil
}

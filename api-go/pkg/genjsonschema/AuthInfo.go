// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type AuthInfo struct {
	// User corresponds to the JSON schema field "user".
	User User `json:"user" yaml:"user" mapstructure:"user"`

	// UserSettings corresponds to the JSON schema field "userSettings".
	UserSettings UserSettings `json:"userSettings" yaml:"userSettings" mapstructure:"userSettings"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthInfo) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["user"]; raw != nil && !ok {
		return fmt.Errorf("field user in AuthInfo: required")
	}
	if _, ok := raw["userSettings"]; raw != nil && !ok {
		return fmt.Errorf("field userSettings in AuthInfo: required")
	}
	type Plain AuthInfo
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AuthInfo(plain)
	return nil
}

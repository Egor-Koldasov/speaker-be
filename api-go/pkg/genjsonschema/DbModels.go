// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type DbModels struct {
	// CardConfig corresponds to the JSON schema field "CardConfig".
	CardConfig CardConfig `json:"CardConfig" yaml:"CardConfig" mapstructure:"CardConfig"`

	// FieldConfig corresponds to the JSON schema field "FieldConfig".
	FieldConfig FieldConfig `json:"FieldConfig" yaml:"FieldConfig" mapstructure:"FieldConfig"`

	// FieldValue corresponds to the JSON schema field "FieldValue".
	FieldValue FieldValue `json:"FieldValue" yaml:"FieldValue" mapstructure:"FieldValue"`

	// FieldValueSet corresponds to the JSON schema field "FieldValueSet".
	FieldValueSet FieldValueSet `json:"FieldValueSet" yaml:"FieldValueSet" mapstructure:"FieldValueSet"`

	// ModelBase corresponds to the JSON schema field "ModelBase".
	ModelBase DbModelBase `json:"ModelBase" yaml:"ModelBase" mapstructure:"ModelBase"`

	// RelCardConfigFieldConfig corresponds to the JSON schema field
	// "RelCardConfigFieldConfig".
	RelCardConfigFieldConfig RelCardConfigFieldConfig `json:"RelCardConfigFieldConfig" yaml:"RelCardConfigFieldConfig" mapstructure:"RelCardConfigFieldConfig"`

	// SessionToken corresponds to the JSON schema field "SessionToken".
	SessionToken SessionToken `json:"SessionToken" yaml:"SessionToken" mapstructure:"SessionToken"`

	// SignUpCode corresponds to the JSON schema field "SignUpCode".
	SignUpCode SignUpCode `json:"SignUpCode" yaml:"SignUpCode" mapstructure:"SignUpCode"`

	// User corresponds to the JSON schema field "User".
	User User `json:"User" yaml:"User" mapstructure:"User"`

	// UserSettings corresponds to the JSON schema field "UserSettings".
	UserSettings UserSettings `json:"UserSettings" yaml:"UserSettings" mapstructure:"UserSettings"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DbModels) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["CardConfig"]; raw != nil && !ok {
		return fmt.Errorf("field CardConfig in DbModels: required")
	}
	if _, ok := raw["FieldConfig"]; raw != nil && !ok {
		return fmt.Errorf("field FieldConfig in DbModels: required")
	}
	if _, ok := raw["FieldValue"]; raw != nil && !ok {
		return fmt.Errorf("field FieldValue in DbModels: required")
	}
	if _, ok := raw["FieldValueSet"]; raw != nil && !ok {
		return fmt.Errorf("field FieldValueSet in DbModels: required")
	}
	if _, ok := raw["ModelBase"]; raw != nil && !ok {
		return fmt.Errorf("field ModelBase in DbModels: required")
	}
	if _, ok := raw["RelCardConfigFieldConfig"]; raw != nil && !ok {
		return fmt.Errorf("field RelCardConfigFieldConfig in DbModels: required")
	}
	if _, ok := raw["SessionToken"]; raw != nil && !ok {
		return fmt.Errorf("field SessionToken in DbModels: required")
	}
	if _, ok := raw["SignUpCode"]; raw != nil && !ok {
		return fmt.Errorf("field SignUpCode in DbModels: required")
	}
	if _, ok := raw["User"]; raw != nil && !ok {
		return fmt.Errorf("field User in DbModels: required")
	}
	if _, ok := raw["UserSettings"]; raw != nil && !ok {
		return fmt.Errorf("field UserSettings in DbModels: required")
	}
	type Plain DbModels
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DbModels(plain)
	return nil
}

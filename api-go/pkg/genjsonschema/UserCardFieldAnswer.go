// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

type UserCardFieldAnswer struct {
	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text" mapstructure:"text"`

	// UserCardFieldName corresponds to the JSON schema field "userCardFieldName".
	UserCardFieldName string `json:"userCardFieldName" yaml:"userCardFieldName" mapstructure:"userCardFieldName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UserCardFieldAnswer) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["text"]; raw != nil && !ok {
		return fmt.Errorf("field text in UserCardFieldAnswer: required")
	}
	if _, ok := raw["userCardFieldName"]; raw != nil && !ok {
		return fmt.Errorf("field userCardFieldName in UserCardFieldAnswer: required")
	}
	type Plain UserCardFieldAnswer
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = UserCardFieldAnswer(plain)
	return nil
}

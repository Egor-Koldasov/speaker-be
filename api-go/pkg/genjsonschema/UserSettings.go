// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

// The list of BCP 47 language tags of the languages foreign to the user that are
// most commonly used in the learning process. Take this list as a priority when
// you try to detect the text language of the text foreign to the user. Although it
// is not guaranteed to completely match the text languages
type ForeignLanguages []string

// The list of BCP 47 language tags of the languages native to the user. Take this
// list as a priority when you try to detect the text language. Although it is not
// guaranteed to completely match the text languages
type NativeLanguages []string

// The BCP 47 language tag of the language that the user wants to translate the
// text to.
type PrimaryForeignLanguage string

// The BCP 47 language tag of the language that the user wants to translate the
// foreign text to.
type TranslationLanguage string

type UserSettings struct {
	// ISO 8601 date string
	CreatedAt string `json:"createdAt" yaml:"createdAt" mapstructure:"createdAt"`

	// ISO 8601 date string or null
	DeletedAt *string `json:"deletedAt" yaml:"deletedAt" mapstructure:"deletedAt"`

	// ForeignLanguages corresponds to the JSON schema field "foreignLanguages".
	ForeignLanguages ForeignLanguages `json:"foreignLanguages" yaml:"foreignLanguages" mapstructure:"foreignLanguages"`

	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id" yaml:"id" mapstructure:"id"`

	// NativeLanguages corresponds to the JSON schema field "nativeLanguages".
	NativeLanguages NativeLanguages `json:"nativeLanguages" yaml:"nativeLanguages" mapstructure:"nativeLanguages"`

	// PrimaryForeignLanguage corresponds to the JSON schema field
	// "primaryForeignLanguage".
	PrimaryForeignLanguage PrimaryForeignLanguage `json:"primaryForeignLanguage" yaml:"primaryForeignLanguage" mapstructure:"primaryForeignLanguage"`

	// TranslationLanguage corresponds to the JSON schema field "translationLanguage".
	TranslationLanguage TranslationLanguage `json:"translationLanguage" yaml:"translationLanguage" mapstructure:"translationLanguage"`

	// ISO 8601 date string
	UpdatedAt string `json:"updatedAt" yaml:"updatedAt" mapstructure:"updatedAt"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UserSettings) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["createdAt"]; raw != nil && !ok {
		return fmt.Errorf("field createdAt in UserSettings: required")
	}
	if _, ok := raw["deletedAt"]; raw != nil && !ok {
		return fmt.Errorf("field deletedAt in UserSettings: required")
	}
	if _, ok := raw["foreignLanguages"]; raw != nil && !ok {
		return fmt.Errorf("field foreignLanguages in UserSettings: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in UserSettings: required")
	}
	if _, ok := raw["nativeLanguages"]; raw != nil && !ok {
		return fmt.Errorf("field nativeLanguages in UserSettings: required")
	}
	if _, ok := raw["primaryForeignLanguage"]; raw != nil && !ok {
		return fmt.Errorf("field primaryForeignLanguage in UserSettings: required")
	}
	if _, ok := raw["translationLanguage"]; raw != nil && !ok {
		return fmt.Errorf("field translationLanguage in UserSettings: required")
	}
	if _, ok := raw["updatedAt"]; raw != nil && !ok {
		return fmt.Errorf("field updatedAt in UserSettings: required")
	}
	type Plain UserSettings
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = UserSettings(plain)
	return nil
}

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

// CardConfig with its fieldConfigs loaded
type LensCardConfig struct {
	// ISO 8601 date string
	CreatedAt string `json:"createdAt" yaml:"createdAt" mapstructure:"createdAt"`

	// ISO 8601 date string or null
	DeletedAt *string `json:"deletedAt" yaml:"deletedAt" mapstructure:"deletedAt"`

	// A map of fieldConfigs with their names as keys
	FieldConfigByName LensCardConfigFieldConfigByName `json:"fieldConfigByName" yaml:"fieldConfigByName" mapstructure:"fieldConfigByName"`

	// Id corresponds to the JSON schema field "id".
	Id DbId `json:"id" yaml:"id" mapstructure:"id"`

	// The name of the card config
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Prompt corresponds to the JSON schema field "prompt".
	Prompt string `json:"prompt" yaml:"prompt" mapstructure:"prompt"`

	// A list of all the parameter definitions that will be added to each FieldConfig.
	PromptParameterDefinitions []PromptParameterDefinition `json:"promptParameterDefinitions" yaml:"promptParameterDefinitions" mapstructure:"promptParameterDefinitions"`

	// ISO 8601 date string
	UpdatedAt string `json:"updatedAt" yaml:"updatedAt" mapstructure:"updatedAt"`
}

// A map of fieldConfigs with their names as keys
type LensCardConfigFieldConfigByName map[string]FieldConfig

// UnmarshalJSON implements json.Unmarshaler.
func (j *LensCardConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["createdAt"]; raw != nil && !ok {
		return fmt.Errorf("field createdAt in LensCardConfig: required")
	}
	if _, ok := raw["deletedAt"]; raw != nil && !ok {
		return fmt.Errorf("field deletedAt in LensCardConfig: required")
	}
	if _, ok := raw["fieldConfigByName"]; raw != nil && !ok {
		return fmt.Errorf("field fieldConfigByName in LensCardConfig: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in LensCardConfig: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in LensCardConfig: required")
	}
	if _, ok := raw["prompt"]; raw != nil && !ok {
		return fmt.Errorf("field prompt in LensCardConfig: required")
	}
	if _, ok := raw["promptParameterDefinitions"]; raw != nil && !ok {
		return fmt.Errorf("field promptParameterDefinitions in LensCardConfig: required")
	}
	if _, ok := raw["updatedAt"]; raw != nil && !ok {
		return fmt.Errorf("field updatedAt in LensCardConfig: required")
	}
	type Plain LensCardConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LensCardConfig(plain)
	return nil
}

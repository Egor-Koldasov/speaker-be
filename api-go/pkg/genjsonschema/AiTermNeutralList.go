// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package genjsonschema

import "encoding/json"
import "fmt"

// A list of terms extracted from text, with each term converted to its neutral
// grammatical form
type AiTermNeutralList struct {
	// A list of terms extracted from the text, converted to their neutral grammatical
	// forms
	ContextTerms []AiContextTerm `json:"contextTerms" yaml:"contextTerms" mapstructure:"contextTerms"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AiTermNeutralList) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["contextTerms"]; raw != nil && !ok {
		return fmt.Errorf("field contextTerms in AiTermNeutralList: required")
	}
	type Plain AiTermNeutralList
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AiTermNeutralList(plain)
	return nil
}

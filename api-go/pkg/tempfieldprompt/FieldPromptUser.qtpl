{% import "api-go/pkg/genjsonschema" %}
{% code
type FieldPromptUserProps struct {
	CardConfig genjsonschema.CardConfig
	FieldConfig genjsonschema.FieldConfig
	CardParamValues map[string]string
	FieldParamValues map[string]string
}
%}

{% func FieldPromptUser(props FieldPromptUserProps) %}
=== CARD CONFIG (Context) ===
- Card Name: {%s= props.CardConfig.Name %}
- Card Prompt (Context Only): {%s= props.CardConfig.Prompt %}

=== PARAMETERS DEFINITIONS ===
{% for _, parameterDefinition := range props.CardConfig.PromptParameterDefinitions %}
- Name: {%s= parameterDefinition.Name %}
  Description: {%s= parameterDefinition.ParameterDescription %}
{% endfor %}
{% for _, parameterDefinition := range props.FieldConfig.PromptParameterDefinitions %}
- Name: {%s= parameterDefinition.Name %}
  Description: {%s= parameterDefinition.ParameterDescription %}
{% endfor %}

=== FIELD CONFIG (Instructions) ===
- Field Name: {%s= props.FieldConfig.Name %}
- Field Prompt (AI Instructions): {%s= props.FieldConfig.Prompt %}

=== PARAMETERS VALUES ===
{% for _, parameterDefinition := range props.CardConfig.PromptParameterDefinitions %}
- Name: {%s= parameterDefinition.Name %}
  Value: {%s= props.CardParamValues[parameterDefinition.Name] %}
{% endfor %}
{% for _, parameterDefinition := range props.FieldConfig.PromptParameterDefinitions %}
- Name: {%s= parameterDefinition.Name %}
  Value: {%s= props.FieldParamValues[parameterDefinition.Name] %}
{% endfor %}

=== USER REQUEST ===
1. Use the Card Prompt above solely as context or background.
2. Follow the Field Prompt as your main instructions for generating the final text response.
3. Incorporate the parameter definitions and use the provided parameter values as applicable.
4. Produce your answer in plain text.
{% endfunc %}
// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package jsonschema

import "encoding/json"
import "fmt"
import "reflect"

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignInput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in MessageParseTextFromForeignInput: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in MessageParseTextFromForeignInput: required")
	}
	type Plain MessageParseTextFromForeignInput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeignInput(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeign) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["input"]; !ok || v == nil {
		return fmt.Errorf("field input in MessageParseTextFromForeign: required")
	}
	if v, ok := raw["output"]; !ok || v == nil {
		return fmt.Errorf("field output in MessageParseTextFromForeign: required")
	}
	type Plain MessageParseTextFromForeign
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeign(plain)
	return nil
}

type ErrorName string

const ErrorNameUnknown ErrorName = "Unknown"
const ErrorNameAiCreateCompletion ErrorName = "AiCreateCompletion"
const ErrorNameAIResponseUnmarshal ErrorName = "AIResponseUnmarshal"
const ErrorNameAiResponse ErrorName = "AiResponse"

type MessageParseTextFromForeignInputData struct {
	// OriginalLanguages corresponds to the JSON schema field "originalLanguages".
	OriginalLanguages []string `json:"originalLanguages" yaml:"originalLanguages" mapstructure:"originalLanguages"`

	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text" mapstructure:"text"`

	// The BCP 47 language tag of the language that the user wants to translate the
	// text to.
	TranslationLanguage string `json:"translationLanguage" yaml:"translationLanguage" mapstructure:"translationLanguage"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignInputData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["originalLanguages"]; !ok || v == nil {
		return fmt.Errorf("field originalLanguages in MessageParseTextFromForeignInputData: required")
	}
	if v, ok := raw["text"]; !ok || v == nil {
		return fmt.Errorf("field text in MessageParseTextFromForeignInputData: required")
	}
	if v, ok := raw["translationLanguage"]; !ok || v == nil {
		return fmt.Errorf("field translationLanguage in MessageParseTextFromForeignInputData: required")
	}
	type Plain MessageParseTextFromForeignInputData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeignInputData(plain)
	return nil
}

type MessageParseTextFromForeignInputName string

var enumValues_MessageParseTextFromForeignInputName = []interface{}{
	"ParseTextFromForeign",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignInputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageParseTextFromForeignInputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageParseTextFromForeignInputName, v)
	}
	*j = MessageParseTextFromForeignInputName(v)
	return nil
}

const MessageParseTextFromForeignInputNameParseTextFromForeign MessageParseTextFromForeignInputName = "ParseTextFromForeign"

type MessageParseTextFromForeignInput struct {
	// Data corresponds to the JSON schema field "data".
	Data MessageParseTextFromForeignInputData `json:"data" yaml:"data" mapstructure:"data"`

	// Name corresponds to the JSON schema field "name".
	Name MessageParseTextFromForeignInputName `json:"name" yaml:"name" mapstructure:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ErrorName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ErrorName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ErrorName, v)
	}
	*j = ErrorName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignOutputDataDefinitionPartsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["text"]; !ok || v == nil {
		return fmt.Errorf("field text in MessageParseTextFromForeignOutputDataDefinitionPartsElem: required")
	}
	type Plain MessageParseTextFromForeignOutputDataDefinitionPartsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeignOutputDataDefinitionPartsElem(plain)
	return nil
}

var enumValues_ErrorName = []interface{}{
	"Unknown",
	"AiCreateCompletion",
	"AIResponseUnmarshal",
	"AiResponse",
}

// The full translation of the text to the requested language.
type MessageParseTextFromForeignOutputDataTranslation struct {
	// The BCP 47 language tag of the language of the translation. It should match the
	// requested 'translationLanguage'
	Language string `json:"language" yaml:"language" mapstructure:"language"`

	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text" mapstructure:"text"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignOutputDataTranslation) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["language"]; !ok || v == nil {
		return fmt.Errorf("field language in MessageParseTextFromForeignOutputDataTranslation: required")
	}
	if v, ok := raw["text"]; !ok || v == nil {
		return fmt.Errorf("field text in MessageParseTextFromForeignOutputDataTranslation: required")
	}
	type Plain MessageParseTextFromForeignOutputDataTranslation
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeignOutputDataTranslation(plain)
	return nil
}

// Split the text into grammatical parts. A part should be a dictionary entry like
// a single word or a famous phrase, it is something that can be defined or
// translated. Do not include symbols, unless they are the integral part of a
// phrase.
type MessageParseTextFromForeignOutputData struct {
	// DefinitionParts corresponds to the JSON schema field "definitionParts".
	DefinitionParts []MessageParseTextFromForeignOutputDataDefinitionPartsElem `json:"definitionParts" yaml:"definitionParts" mapstructure:"definitionParts"`

	// The full translation of the text to the requested language.
	Translation MessageParseTextFromForeignOutputDataTranslation `json:"translation" yaml:"translation" mapstructure:"translation"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignOutputData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["definitionParts"]; !ok || v == nil {
		return fmt.Errorf("field definitionParts in MessageParseTextFromForeignOutputData: required")
	}
	if v, ok := raw["translation"]; !ok || v == nil {
		return fmt.Errorf("field translation in MessageParseTextFromForeignOutputData: required")
	}
	type Plain MessageParseTextFromForeignOutputData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeignOutputData(plain)
	return nil
}

type MessageParseTextFromForeignOutputErrorsElem struct {
	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`

	// Name corresponds to the JSON schema field "name".
	Name ErrorName `json:"name" yaml:"name" mapstructure:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignOutputErrorsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["message"]; !ok || v == nil {
		return fmt.Errorf("field message in MessageParseTextFromForeignOutputErrorsElem: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in MessageParseTextFromForeignOutputErrorsElem: required")
	}
	type Plain MessageParseTextFromForeignOutputErrorsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeignOutputErrorsElem(plain)
	return nil
}

type MessageParseTextFromForeignOutputName string

var enumValues_MessageParseTextFromForeignOutputName = []interface{}{
	"ParseTextFromForeign",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignOutputName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageParseTextFromForeignOutputName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageParseTextFromForeignOutputName, v)
	}
	*j = MessageParseTextFromForeignOutputName(v)
	return nil
}

const MessageParseTextFromForeignOutputNameParseTextFromForeign MessageParseTextFromForeignOutputName = "ParseTextFromForeign"

// The result of parsing the text for futher translation.
type MessageParseTextFromForeignOutput struct {
	// Split the text into grammatical parts. A part should be a dictionary entry like
	// a single word or a famous phrase, it is something that can be defined or
	// translated. Do not include symbols, unless they are the integral part of a
	// phrase.
	Data MessageParseTextFromForeignOutputData `json:"data" yaml:"data" mapstructure:"data"`

	// Errors corresponds to the JSON schema field "errors".
	Errors []MessageParseTextFromForeignOutputErrorsElem `json:"errors" yaml:"errors" mapstructure:"errors"`

	// Name corresponds to the JSON schema field "name".
	Name MessageParseTextFromForeignOutputName `json:"name" yaml:"name" mapstructure:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageParseTextFromForeignOutput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in MessageParseTextFromForeignOutput: required")
	}
	if v, ok := raw["errors"]; !ok || v == nil {
		return fmt.Errorf("field errors in MessageParseTextFromForeignOutput: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in MessageParseTextFromForeignOutput: required")
	}
	type Plain MessageParseTextFromForeignOutput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageParseTextFromForeignOutput(plain)
	return nil
}

type MessageParseTextFromForeign struct {
	// Input corresponds to the JSON schema field "input".
	Input MessageParseTextFromForeignInput `json:"input" yaml:"input" mapstructure:"input"`

	// The result of parsing the text for futher translation.
	Output MessageParseTextFromForeignOutput `json:"output" yaml:"output" mapstructure:"output"`
}

type MessageParseTextFromForeignOutputDataDefinitionPartsElem struct {
	// The BCP 47 language tag of the language of that part. Null for unknown
	LanguageOriginal *string `json:"languageOriginal,omitempty" yaml:"languageOriginal,omitempty" mapstructure:"languageOriginal,omitempty"`

	// The BCP 47 language tag of the language of the translation. It should match the
	// requested 'translationLanguage'
	LanguageTranslated *string `json:"languageTranslated,omitempty" yaml:"languageTranslated,omitempty" mapstructure:"languageTranslated,omitempty"`

	// The text of the part split. Keep this part small, it should not be longer than
	// a typical dictionary entry point. Usualy a single word or sometimes a single
	// word or a famous phrase. Do not include any punctuation symbols, enclosing
	// parentheses or apostrophes an so on.
	Text string `json:"text" yaml:"text" mapstructure:"text"`

	// A short translation of the definition part without additional formatting. Among
	// several translation choices, choose the one that is the best fitting the
	// original context from the user input text that was sent for this parsing.
	Translation *string `json:"translation,omitempty" yaml:"translation,omitempty" mapstructure:"translation,omitempty"`
}

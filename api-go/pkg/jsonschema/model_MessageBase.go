// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package jsonschema

import "encoding/json"
import "fmt"
import "reflect"

type ErrorName string

const ErrorNameAIResponseUnmarshal ErrorName = "AIResponseUnmarshal"
const ErrorNameAiCreateCompletion ErrorName = "AiCreateCompletion"
const ErrorNameAiResponse ErrorName = "AiResponse"
const ErrorNameUnknown ErrorName = "Unknown"

type MessageBase struct {
	// Input corresponds to the JSON schema field "input".
	Input MessageBaseInput `json:"input" yaml:"input" mapstructure:"input"`

	// Output corresponds to the JSON schema field "output".
	Output MessageBaseOutput `json:"output" yaml:"output" mapstructure:"output"`
}

type MessageBaseInput struct {
	// Data corresponds to the JSON schema field "data".
	Data MessageBaseInputData `json:"data" yaml:"data" mapstructure:"data"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`
}

type MessageBaseInputData map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ErrorName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ErrorName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ErrorName, v)
	}
	*j = ErrorName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageBaseInput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in MessageBaseInput: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in MessageBaseInput: required")
	}
	type Plain MessageBaseInput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageBaseInput(plain)
	return nil
}

type MessageBaseOutputData map[string]interface{}

type MessageBaseOutputErrorsElem struct {
	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`

	// Name corresponds to the JSON schema field "name".
	Name ErrorName `json:"name" yaml:"name" mapstructure:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageBaseOutputErrorsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["message"]; !ok || v == nil {
		return fmt.Errorf("field message in MessageBaseOutputErrorsElem: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in MessageBaseOutputErrorsElem: required")
	}
	type Plain MessageBaseOutputErrorsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageBaseOutputErrorsElem(plain)
	return nil
}

type MessageBaseOutput struct {
	// Data corresponds to the JSON schema field "data".
	Data MessageBaseOutputData `json:"data" yaml:"data" mapstructure:"data"`

	// Errors corresponds to the JSON schema field "errors".
	Errors []MessageBaseOutputErrorsElem `json:"errors" yaml:"errors" mapstructure:"errors"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageBaseOutput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data in MessageBaseOutput: required")
	}
	if v, ok := raw["errors"]; !ok || v == nil {
		return fmt.Errorf("field errors in MessageBaseOutput: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in MessageBaseOutput: required")
	}
	type Plain MessageBaseOutput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageBaseOutput(plain)
	return nil
}

var enumValues_ErrorName = []interface{}{
	"Unknown",
	"AiCreateCompletion",
	"AIResponseUnmarshal",
	"AiResponse",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageBase) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["input"]; !ok || v == nil {
		return fmt.Errorf("field input in MessageBase: required")
	}
	if v, ok := raw["output"]; !ok || v == nil {
		return fmt.Errorf("field output in MessageBase: required")
	}
	type Plain MessageBase
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MessageBase(plain)
	return nil
}
